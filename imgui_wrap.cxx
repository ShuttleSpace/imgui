/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: imgui.i

#define SWIGMODULE imgui

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



#include <stdint.h>
#if (SIZE_MAX) == (UINT64_MAX)
  typedef long long intgo;
  typedef unsigned long long uintgo;
#else
  typedef int intgo;
  typedef unsigned int uintgo;
#endif


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else





static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "imgui.h"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  Swig_free(arg1);

}


void *_wrap_Swig_malloc(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_Vec2_x_set(ImVec2 *_swig_go_0, float _swig_go_1) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->x = arg2;

}


float _wrap_Vec2_x_get(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (float) ((arg1)->x);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Vec2_y_set(ImVec2 *_swig_go_0, float _swig_go_1) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->y = arg2;

}


float _wrap_Vec2_y_get(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (float) ((arg1)->y);
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_new_Vec2__SWIG_0() {
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;


  result = (ImVec2 *)new ImVec2();
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


ImVec2 *_wrap_new_Vec2__SWIG_1(float _swig_go_0, float _swig_go_1) {
  float arg1 ;
  float arg2 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = (ImVec2 *)new ImVec2(arg1,arg2);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_delete_Vec2(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  delete arg1;

}


void _wrap_Vec4_x_set(ImVec4 *_swig_go_0, float _swig_go_1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->x = arg2;

}


float _wrap_Vec4_x_get(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (float) ((arg1)->x);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Vec4_y_set(ImVec4 *_swig_go_0, float _swig_go_1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->y = arg2;

}


float _wrap_Vec4_y_get(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (float) ((arg1)->y);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Vec4_z_set(ImVec4 *_swig_go_0, float _swig_go_1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->z = arg2;

}


float _wrap_Vec4_z_get(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (float) ((arg1)->z);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Vec4_w_set(ImVec4 *_swig_go_0, float _swig_go_1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->w = arg2;

}


float _wrap_Vec4_w_get(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (float) ((arg1)->w);
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec4 *_wrap_new_Vec4__SWIG_0() {
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;


  result = (ImVec4 *)new ImVec4();
  *(ImVec4 **)&_swig_go_result = (ImVec4 *)result;
  return _swig_go_result;
}


ImVec4 *_wrap_new_Vec4__SWIG_1(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (ImVec4 *)new ImVec4(arg1,arg2,arg3,arg4);
  *(ImVec4 **)&_swig_go_result = (ImVec4 *)result;
  return _swig_go_result;
}


void _wrap_delete_Vec4(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;

  arg1 = *(ImVec4 **)&_swig_go_0;

  delete arg1;

}


ImGuiContext *_wrap_CreateContext__SWIG_0(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiContext *result = 0 ;
  ImGuiContext *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImGuiContext *)ImGui::CreateContext(arg1);
  *(ImGuiContext **)&_swig_go_result = (ImGuiContext *)result;
  return _swig_go_result;
}


ImGuiContext *_wrap_CreateContext__SWIG_1() {
  ImGuiContext *result = 0 ;
  ImGuiContext *_swig_go_result;


  result = (ImGuiContext *)ImGui::CreateContext();
  *(ImGuiContext **)&_swig_go_result = (ImGuiContext *)result;
  return _swig_go_result;
}


void _wrap_DestroyContext__SWIG_0(ImGuiContext *_swig_go_0) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;

  arg1 = *(ImGuiContext **)&_swig_go_0;

  ImGui::DestroyContext(arg1);

}


void _wrap_DestroyContext__SWIG_1() {
  ImGui::DestroyContext();

}


ImGuiContext *_wrap_GetCurrentContext() {
  ImGuiContext *result = 0 ;
  ImGuiContext *_swig_go_result;


  result = (ImGuiContext *)ImGui::GetCurrentContext();
  *(ImGuiContext **)&_swig_go_result = (ImGuiContext *)result;
  return _swig_go_result;
}


void _wrap_SetCurrentContext(ImGuiContext *_swig_go_0) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;

  arg1 = *(ImGuiContext **)&_swig_go_0;

  ImGui::SetCurrentContext(arg1);

}


bool _wrap_DebugCheckVersionAndDataLayout(_gostring_ _swig_go_0, long long _swig_go_1, long long _swig_go_2, long long _swig_go_3, long long _swig_go_4, long long _swig_go_5) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (size_t)_swig_go_1;
  arg3 = (size_t)_swig_go_2;
  arg4 = (size_t)_swig_go_3;
  arg5 = (size_t)_swig_go_4;
  arg6 = (size_t)_swig_go_5;

  result = (bool)ImGui::DebugCheckVersionAndDataLayout((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


ImGuiIO *_wrap_GetIO() {
  ImGuiIO *result = 0 ;
  ImGuiIO *_swig_go_result;


  result = (ImGuiIO *) &ImGui::GetIO();
  *(ImGuiIO **)&_swig_go_result = result;
  return _swig_go_result;
}


ImGuiStyle *_wrap_GetStyle() {
  ImGuiStyle *result = 0 ;
  ImGuiStyle *_swig_go_result;


  result = (ImGuiStyle *) &ImGui::GetStyle();
  *(ImGuiStyle **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_NewFrame() {
  ImGui::NewFrame();

}


void _wrap_EndFrame() {
  ImGui::EndFrame();

}


void _wrap_Render() {
  ImGui::Render();

}


ImDrawData *_wrap_GetDrawData() {
  ImDrawData *result = 0 ;
  ImDrawData *_swig_go_result;


  result = (ImDrawData *)ImGui::GetDrawData();
  *(ImDrawData **)&_swig_go_result = (ImDrawData *)result;
  return _swig_go_result;
}


void _wrap_StyleColorsDark__SWIG_0(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  ImGui::StyleColorsDark(arg1);

}


void _wrap_StyleColorsDark__SWIG_1() {
  ImGui::StyleColorsDark();

}


void _wrap_StyleColorsClassic__SWIG_0(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  ImGui::StyleColorsClassic(arg1);

}


void _wrap_StyleColorsClassic__SWIG_1() {
  ImGui::StyleColorsClassic();

}


void _wrap_StyleColorsLight__SWIG_0(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  ImGui::StyleColorsLight(arg1);

}


void _wrap_StyleColorsLight__SWIG_1() {
  ImGui::StyleColorsLight();

}


bool _wrap_Begin__SWIG_0(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiWindowFlags)_swig_go_2;

  result = (bool)ImGui::Begin((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Begin__SWIG_1(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::Begin((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Begin__SWIG_2(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::Begin((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_End() {
  ImGui::End();

}


bool _wrap_BeginChild__SWIG_0(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;
  arg4 = (ImGuiWindowFlags)_swig_go_3;

  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_1(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_2(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_3(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginChild((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_4(intgo _swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;
  arg4 = (ImGuiWindowFlags)_swig_go_3;

  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3,arg4);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_5(intgo _swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_6(intgo _swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_7(intgo _swig_go_0) {
  ImGuiID arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;

  result = (bool)ImGui::BeginChild(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndChild() {
  ImGui::EndChild();

}


bool _wrap_IsWindowAppearing() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsWindowAppearing();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsWindowCollapsed() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsWindowCollapsed();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsWindowFocused__SWIG_0(intgo _swig_go_0) {
  ImGuiFocusedFlags arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiFocusedFlags)_swig_go_0;

  result = (bool)ImGui::IsWindowFocused(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsWindowFocused__SWIG_1() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsWindowFocused();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsWindowHovered__SWIG_0(intgo _swig_go_0) {
  ImGuiHoveredFlags arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiHoveredFlags)_swig_go_0;

  result = (bool)ImGui::IsWindowHovered(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsWindowHovered__SWIG_1() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsWindowHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


ImDrawList *_wrap_GetWindowDrawList() {
  ImDrawList *result = 0 ;
  ImDrawList *_swig_go_result;


  result = (ImDrawList *)ImGui::GetWindowDrawList();
  *(ImDrawList **)&_swig_go_result = (ImDrawList *)result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetWindowPos() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetWindowPos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetWindowSize() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetWindowSize();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


float _wrap_GetWindowWidth() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetWindowWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetWindowHeight() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetWindowHeight();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetContentRegionMax() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetContentRegionMax();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetContentRegionAvail() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetContentRegionAvail();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


float _wrap_GetContentRegionAvailWidth() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetContentRegionAvailWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetWindowContentRegionMin() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetWindowContentRegionMin();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetWindowContentRegionMax() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetWindowContentRegionMax();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


float _wrap_GetWindowContentRegionWidth() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetWindowContentRegionWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetNextWindowPos__SWIG_0(ImVec2 *_swig_go_0, intgo _swig_go_1, ImVec2 *_swig_go_2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  ImVec2 *arg3 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;

  ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2,(ImVec2 const &)*arg3);

}


void _wrap_SetNextWindowPos__SWIG_1(ImVec2 *_swig_go_0, intgo _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2);

}


void _wrap_SetNextWindowPos__SWIG_2(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetNextWindowPos((ImVec2 const &)*arg1);

}


void _wrap_SetNextWindowSize__SWIG_0(ImVec2 *_swig_go_0, intgo _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetNextWindowSize((ImVec2 const &)*arg1,arg2);

}


void _wrap_SetNextWindowSize__SWIG_1(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetNextWindowSize((ImVec2 const &)*arg1);

}


void _wrap_SetNextWindowSizeConstraints__SWIG_0(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1, void* _swig_go_2, void *_swig_go_3) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiSizeCallback arg3 = (ImGuiSizeCallback) 0 ;
  void *arg4 = (void *) 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImGuiSizeCallback *)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;

  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3,arg4);

}


void _wrap_SetNextWindowSizeConstraints__SWIG_1(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1, void* _swig_go_2) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiSizeCallback arg3 = (ImGuiSizeCallback) 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImGuiSizeCallback *)&_swig_go_2;

  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);

}


void _wrap_SetNextWindowSizeConstraints__SWIG_2(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);

}


void _wrap_SetNextWindowContentSize(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetNextWindowContentSize((ImVec2 const &)*arg1);

}


void _wrap_SetNextWindowCollapsed__SWIG_0(bool _swig_go_0, intgo _swig_go_1) {
  bool arg1 ;
  ImGuiCond arg2 ;

  arg1 = (bool)_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetNextWindowCollapsed(arg1,arg2);

}


void _wrap_SetNextWindowCollapsed__SWIG_1(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::SetNextWindowCollapsed(arg1);

}


void _wrap_SetNextWindowFocus() {
  ImGui::SetNextWindowFocus();

}


void _wrap_SetNextWindowBgAlpha(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetNextWindowBgAlpha(arg1);

}


void _wrap_SetWindowPos__SWIG_0(ImVec2 *_swig_go_0, intgo _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetWindowPos((ImVec2 const &)*arg1,arg2);

}


void _wrap_SetWindowPos__SWIG_1(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetWindowPos((ImVec2 const &)*arg1);

}


void _wrap_SetWindowSize__SWIG_0(ImVec2 *_swig_go_0, intgo _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetWindowSize((ImVec2 const &)*arg1,arg2);

}


void _wrap_SetWindowSize__SWIG_1(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetWindowSize((ImVec2 const &)*arg1);

}


void _wrap_SetWindowCollapsed__SWIG_0(bool _swig_go_0, intgo _swig_go_1) {
  bool arg1 ;
  ImGuiCond arg2 ;

  arg1 = (bool)_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetWindowCollapsed(arg1,arg2);

}


void _wrap_SetWindowCollapsed__SWIG_1(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::SetWindowCollapsed(arg1);

}


void _wrap_SetWindowFocus__SWIG_0() {
  ImGui::SetWindowFocus();

}


void _wrap_SetWindowFontScale(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetWindowFontScale(arg1);

}


void _wrap_SetWindowPos__SWIG_2(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiCond)_swig_go_2;

  ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2,arg3);

  free(arg1);
}


void _wrap_SetWindowPos__SWIG_3(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2);

  free(arg1);
}


void _wrap_SetWindowSize__SWIG_2(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiCond)_swig_go_2;

  ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2,arg3);

  free(arg1);
}


void _wrap_SetWindowSize__SWIG_3(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2);

  free(arg1);
}


void _wrap_SetWindowCollapsed__SWIG_2(_gostring_ _swig_go_0, bool _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiCond arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;
  arg3 = (ImGuiCond)_swig_go_2;

  ImGui::SetWindowCollapsed((char const *)arg1,arg2,arg3);

  free(arg1);
}


void _wrap_SetWindowCollapsed__SWIG_3(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  ImGui::SetWindowCollapsed((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_SetWindowFocus__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::SetWindowFocus((char const *)arg1);

  free(arg1);
}


float _wrap_GetScrollX() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetScrollX();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetScrollY() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetScrollY();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetScrollMaxX() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetScrollMaxX();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetScrollMaxY() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetScrollMaxY();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetScrollX(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetScrollX(arg1);

}


void _wrap_SetScrollY(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetScrollY(arg1);

}


void _wrap_SetScrollHereY__SWIG_0(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetScrollHereY(arg1);

}


void _wrap_SetScrollHereY__SWIG_1() {
  ImGui::SetScrollHereY();

}


void _wrap_SetScrollFromPosY__SWIG_0(float _swig_go_0, float _swig_go_1) {
  float arg1 ;
  float arg2 ;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::SetScrollFromPosY(arg1,arg2);

}


void _wrap_SetScrollFromPosY__SWIG_1(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetScrollFromPosY(arg1);

}


void _wrap_PushFont(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;

  ImGui::PushFont(arg1);

}


void _wrap_PopFont() {
  ImGui::PopFont();

}


void _wrap_PushStyleColor__SWIG_0(intgo _swig_go_0, intgo _swig_go_1) {
  ImGuiCol arg1 ;
  ImU32 arg2 ;

  arg1 = (ImGuiCol)_swig_go_0;
  arg2 = (ImU32)_swig_go_1;

  ImGui::PushStyleColor(arg1,arg2);

}


void _wrap_PushStyleColor__SWIG_1(intgo _swig_go_0, ImVec4 *_swig_go_1) {
  ImGuiCol arg1 ;
  ImVec4 *arg2 = 0 ;

  arg1 = (ImGuiCol)_swig_go_0;
  arg2 = *(ImVec4 **)&_swig_go_1;

  ImGui::PushStyleColor(arg1,(ImVec4 const &)*arg2);

}


void _wrap_PopStyleColor__SWIG_0(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::PopStyleColor(arg1);

}


void _wrap_PopStyleColor__SWIG_1() {
  ImGui::PopStyleColor();

}


void _wrap_PushStyleVar__SWIG_0(intgo _swig_go_0, float _swig_go_1) {
  ImGuiStyleVar arg1 ;
  float arg2 ;

  arg1 = (ImGuiStyleVar)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::PushStyleVar(arg1,arg2);

}


void _wrap_PushStyleVar__SWIG_1(intgo _swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyleVar arg1 ;
  ImVec2 *arg2 = 0 ;

  arg1 = (ImGuiStyleVar)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::PushStyleVar(arg1,(ImVec2 const &)*arg2);

}


void _wrap_PopStyleVar__SWIG_0(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::PopStyleVar(arg1);

}


void _wrap_PopStyleVar__SWIG_1() {
  ImGui::PopStyleVar();

}


ImVec4 *_wrap_GetStyleColorVec4(intgo _swig_go_0) {
  ImGuiCol arg1 ;
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;

  arg1 = (ImGuiCol)_swig_go_0;

  result = (ImVec4 *) &ImGui::GetStyleColorVec4(arg1);
  *(ImVec4 **)&_swig_go_result = result;
  return _swig_go_result;
}


ImFont *_wrap_GetFont() {
  ImFont *result = 0 ;
  ImFont *_swig_go_result;


  result = (ImFont *)ImGui::GetFont();
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


float _wrap_GetFontSize() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetFontSize();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetFontTexUvWhitePixel() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetFontTexUvWhitePixel();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


intgo _wrap_GetColorU32__SWIG_0(intgo _swig_go_0, float _swig_go_1) {
  ImGuiCol arg1 ;
  float arg2 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = (ImGuiCol)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = (ImU32)ImGui::GetColorU32(arg1,arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetColorU32__SWIG_1(intgo _swig_go_0) {
  ImGuiCol arg1 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = (ImGuiCol)_swig_go_0;

  result = (ImU32)ImGui::GetColorU32(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetColorU32__SWIG_2(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (ImU32)ImGui::GetColorU32((ImVec4 const &)*arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetColorU32FromU32(intgo _swig_go_0) {
  ImU32 arg1 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = (ImU32)_swig_go_0;

  result = (ImU32)ImGui::GetColorU32(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_PushItemWidth(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::PushItemWidth(arg1);

}


void _wrap_PopItemWidth() {
  ImGui::PopItemWidth();

}


float _wrap_CalcItemWidth() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::CalcItemWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_PushTextWrapPos__SWIG_0(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::PushTextWrapPos(arg1);

}


void _wrap_PushTextWrapPos__SWIG_1() {
  ImGui::PushTextWrapPos();

}


void _wrap_PopTextWrapPos() {
  ImGui::PopTextWrapPos();

}


void _wrap_PushAllowKeyboardFocus(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::PushAllowKeyboardFocus(arg1);

}


void _wrap_PopAllowKeyboardFocus() {
  ImGui::PopAllowKeyboardFocus();

}


void _wrap_PushButtonRepeat(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::PushButtonRepeat(arg1);

}


void _wrap_PopButtonRepeat() {
  ImGui::PopButtonRepeat();

}


void _wrap_Separator() {
  ImGui::Separator();

}


void _wrap_SameLine__SWIG_0(float _swig_go_0, float _swig_go_1) {
  float arg1 ;
  float arg2 ;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::SameLine(arg1,arg2);

}


void _wrap_SameLine__SWIG_1(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SameLine(arg1);

}


void _wrap_SameLine__SWIG_2() {
  ImGui::SameLine();

}


void _wrap_NewLine() {
  ImGui::NewLine();

}


void _wrap_Spacing() {
  ImGui::Spacing();

}


void _wrap_Dummy(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::Dummy((ImVec2 const &)*arg1);

}


void _wrap_Indent__SWIG_0(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::Indent(arg1);

}


void _wrap_Indent__SWIG_1() {
  ImGui::Indent();

}


void _wrap_Unindent__SWIG_0(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::Unindent(arg1);

}


void _wrap_Unindent__SWIG_1() {
  ImGui::Unindent();

}


void _wrap_BeginGroup() {
  ImGui::BeginGroup();

}


void _wrap_EndGroup() {
  ImGui::EndGroup();

}


ImVec2 *_wrap_GetCursorPos() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetCursorPos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


float _wrap_GetCursorPosX() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetCursorPosX();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetCursorPosY() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetCursorPosY();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetCursorPos(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetCursorPos((ImVec2 const &)*arg1);

}


void _wrap_SetCursorPosX(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetCursorPosX(arg1);

}


void _wrap_SetCursorPosY(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetCursorPosY(arg1);

}


ImVec2 *_wrap_GetCursorStartPos() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetCursorStartPos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetCursorScreenPos() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetCursorScreenPos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


void _wrap_SetCursorScreenPos(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetCursorScreenPos((ImVec2 const &)*arg1);

}


void _wrap_AlignTextToFramePadding() {
  ImGui::AlignTextToFramePadding();

}


float _wrap_GetTextLineHeight() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetTextLineHeight();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetTextLineHeightWithSpacing() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetTextLineHeightWithSpacing();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetFrameHeight() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetFrameHeight();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetFrameHeightWithSpacing() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetFrameHeightWithSpacing();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_PushID__SWIG_0(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::PushID((char const *)arg1);

  free(arg1);
}


void _wrap_PushID__SWIG_1(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::PushID((char const *)arg1,(char const *)arg2);

  free(arg1);
  free(arg2);
}


void _wrap_PushID__SWIG_2(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  ImGui::PushID((void const *)arg1);

}


void _wrap_PushID__SWIG_3(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::PushID(arg1);

}


void _wrap_PopID() {
  ImGui::PopID();

}


intgo _wrap_GetID__SWIG_0(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  ImGuiID result;
  intgo _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (ImGuiID)ImGui::GetID((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


intgo _wrap_GetID__SWIG_1(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID result;
  intgo _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (ImGuiID)ImGui::GetID((char const *)arg1,(char const *)arg2);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


intgo _wrap_GetID__SWIG_2(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  ImGuiID result;
  intgo _swig_go_result;

  arg1 = *(void **)&_swig_go_0;

  result = (ImGuiID)ImGui::GetID((void const *)arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_TextUnformatted__SWIG_0(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::TextUnformatted((char const *)arg1,(char const *)arg2);

  free(arg1);
  free(arg2);
}


void _wrap_TextUnformatted__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::TextUnformatted((char const *)arg1);

  free(arg1);
}


void _wrap_Text(char *_swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;

  arg1 = _swig_go_0;

  ImGui::Text((char const *)arg1,arg2);


  // nothing argout


  free(arg1);

}


void _wrap_TextColored(ImVec4 *_swig_go_0, char *_swig_go_1) {
  ImVec4 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = _swig_go_1;

  ImGui::TextColored((ImVec4 const &)*arg1,(char const *)arg2,arg3);


  // nothing argout


  free(arg2);

}


void _wrap_TextDisabled(char *_swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;

  arg1 = _swig_go_0;

  ImGui::TextDisabled((char const *)arg1,arg2);


  // nothing argout


  free(arg1);

}


void _wrap_TextWrapped(char *_swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;

  arg1 = _swig_go_0;

  ImGui::TextWrapped((char const *)arg1,arg2);


  // nothing argout


  free(arg1);

}


void _wrap_LabelText(_gostring_ _swig_go_0, char *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = _swig_go_1;

  ImGui::LabelText((char const *)arg1,(char const *)arg2,arg3);


  // nothing argout

  free(arg1);

  free(arg2);

}


void _wrap_BulletText(char *_swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;

  arg1 = _swig_go_0;

  ImGui::BulletText((char const *)arg1,arg2);


  // nothing argout


  free(arg1);

}


bool _wrap_Button__SWIG_0(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::Button((char const *)arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Button__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::Button((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SmallButton(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::SmallButton((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InvisibleButton(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ArrowButton(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDir)_swig_go_1;

  result = (bool)ImGui::ArrowButton((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_Image__SWIG_0(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec4 *_swig_go_4, ImVec4 *_swig_go_5) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;
  ImVec4 *arg6 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec4 **)&_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5,(ImVec4 const &)*arg6);

}


void _wrap_Image__SWIG_1(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec4 *_swig_go_4) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec4 **)&_swig_go_4;

  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5);

}


void _wrap_Image__SWIG_2(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);

}


void _wrap_Image__SWIG_3(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;

  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);

}


void _wrap_Image__SWIG_4(ImTextureID _swig_go_0, ImVec2 *_swig_go_1) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::Image(arg1,(ImVec2 const &)*arg2);

}


bool _wrap_ImageButton__SWIG_0(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5, ImVec4 *_swig_go_6) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  ImVec4 *arg7 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;
  arg7 = *(ImVec4 **)&_swig_go_6;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6,(ImVec4 const &)*arg7);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_1(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_2(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_3(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_4(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_5(ImTextureID _swig_go_0, ImVec2 *_swig_go_1) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_Checkbox(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::Checkbox((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_CheckboxFlags(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(unsigned int **)&_swig_go_1;
  arg3 = (unsigned int)_swig_go_2;

  result = (bool)ImGui::CheckboxFlags((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_RadioButton__SWIG_0(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::RadioButton((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_RadioButton__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::RadioButton((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_ProgressBar__SWIG_0(float _swig_go_0, ImVec2 *_swig_go_1, _gostring_ _swig_go_2) {
  float arg1 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;

  arg1 = (float)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2,(char const *)arg3);

  free(arg3);
}


void _wrap_ProgressBar__SWIG_1(float _swig_go_0, ImVec2 *_swig_go_1) {
  float arg1 ;
  ImVec2 *arg2 = 0 ;

  arg1 = (float)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2);

}


void _wrap_ProgressBar__SWIG_2(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::ProgressBar(arg1);

}


void _wrap_Bullet() {
  ImGui::Bullet();

}


bool _wrap_BeginCombo__SWIG_0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiComboFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (ImGuiComboFlags)_swig_go_2;

  result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_BeginCombo__SWIG_1(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


void _wrap_EndCombo() {
  ImGui::EndCombo();

}


bool _wrap_Combo__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(char ***)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(char ***)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_2(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';

  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_3(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_4(_gostring_ _swig_go_0, intgo *_swig_go_1, void* _swig_go_2, void *_swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(bool (**)(void *,int,char const **))&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_5(_gostring_ _swig_go_0, intgo *_swig_go_1, void* _swig_go_2, void *_swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(bool (**)(void *,int,char const **))&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_4(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_5(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_4(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_5(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_4(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_5(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_4(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_5(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7, float _swig_go_8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (float)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';

  arg9 = (float)_swig_go_8;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  free(arg8);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (float)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';


  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  free(arg8);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, _gostring_ _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (float)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_4(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_5(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_6(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_2(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_3(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_4(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::DragInt((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_2(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_3(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_4(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::DragInt2((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_2(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_3(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_4(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::DragInt3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_2(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_3(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_4(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::DragInt4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';


  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  free(arg8);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, _gostring_ _swig_go_6) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_2(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_3(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_4(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_5(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;

  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragScalar__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, float _swig_go_3, void *_swig_go_4, void *_swig_go_5, _gostring_ _swig_go_6, float _swig_go_7) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';

  arg8 = (float)_swig_go_7;

  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_DragScalar__SWIG_1(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, float _swig_go_3, void *_swig_go_4, void *_swig_go_5, _gostring_ _swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_DragScalar__SWIG_2(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, float _swig_go_3, void *_swig_go_4, void *_swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragScalar__SWIG_3(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, float _swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;

  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragScalar__SWIG_4(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragScalarN__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, float _swig_go_4, void *_swig_go_5, void *_swig_go_6, _gostring_ _swig_go_7, float _swig_go_8) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = *(void **)&_swig_go_5;
  arg7 = *(void **)&_swig_go_6;

  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';

  arg9 = (float)_swig_go_8;

  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8,arg9);
  _swig_go_result = result;
  free(arg1);
  free(arg8);
  return _swig_go_result;
}


bool _wrap_DragScalarN__SWIG_1(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, float _swig_go_4, void *_swig_go_5, void *_swig_go_6, _gostring_ _swig_go_7) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = *(void **)&_swig_go_5;
  arg7 = *(void **)&_swig_go_6;

  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';


  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg8);
  return _swig_go_result;
}


bool _wrap_DragScalarN__SWIG_2(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, float _swig_go_4, void *_swig_go_5, void *_swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = *(void **)&_swig_go_5;
  arg7 = *(void **)&_swig_go_6;

  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragScalarN__SWIG_3(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, float _swig_go_4, void *_swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragScalarN__SWIG_4(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderFloat__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderFloat2__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat2__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat2__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderFloat3__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat3__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat3__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderFloat4__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat4__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat4__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderAngle__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderAngle__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderAngle__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderAngle__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderInt__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderInt__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderInt2__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderInt2__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderInt3__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderInt3__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderInt4__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderInt4__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderScalar__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, void *_swig_go_3, void *_swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_SliderScalar__SWIG_1(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, void *_swig_go_3, void *_swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_SliderScalar__SWIG_2(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, void *_swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;

  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderScalarN__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, void *_swig_go_4, void *_swig_go_5, _gostring_ _swig_go_6, float _swig_go_7) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';

  arg8 = (float)_swig_go_7;

  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_SliderScalarN__SWIG_1(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, void *_swig_go_4, void *_swig_go_5, _gostring_ _swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_SliderScalarN__SWIG_2(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, void *_swig_go_4, void *_swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_VSliderFloat__SWIG_0(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_VSliderFloat__SWIG_1(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_VSliderFloat__SWIG_2(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_VSliderInt__SWIG_0(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_VSliderInt__SWIG_1(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_VSliderScalar__SWIG_0(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, void *_swig_go_3, void *_swig_go_4, void *_swig_go_5, _gostring_ _swig_go_6, float _swig_go_7) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiDataType)_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';

  arg8 = (float)_swig_go_7;

  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_VSliderScalar__SWIG_1(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, void *_swig_go_3, void *_swig_go_4, void *_swig_go_5, _gostring_ _swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiDataType)_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_VSliderScalar__SWIG_2(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, void *_swig_go_3, void *_swig_go_4, void *_swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiDataType)_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputText__SWIG_0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, intgo _swig_go_3, void* _swig_go_4, void *_swig_go_5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;
  arg5 = *(ImGuiInputTextCallback *)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputText__SWIG_1(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, intgo _swig_go_3, void* _swig_go_4) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;
  arg5 = *(ImGuiInputTextCallback *)&_swig_go_4;

  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputText__SWIG_2(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;

  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputText__SWIG_3(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;

  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, void* _swig_go_5, void *_swig_go_6) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImGuiInputTextFlags)_swig_go_4;
  arg6 = *(ImGuiInputTextCallback *)&_swig_go_5;
  arg7 = *(void **)&_swig_go_6;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_1(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, void* _swig_go_5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImGuiInputTextFlags)_swig_go_4;
  arg6 = *(ImGuiInputTextCallback *)&_swig_go_5;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_2(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImGuiInputTextFlags)_swig_go_4;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_3(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, ImVec2 *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_4(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (ImGuiInputTextFlags)_swig_go_5;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_4(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat2__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';

  arg4 = (ImGuiInputTextFlags)_swig_go_3;

  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_InputFloat2__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_InputFloat2__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat3__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';

  arg4 = (ImGuiInputTextFlags)_swig_go_3;

  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_InputFloat3__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_InputFloat3__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat4__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';

  arg4 = (ImGuiInputTextFlags)_swig_go_3;

  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_InputFloat4__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_InputFloat4__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (ImGuiInputTextFlags)_swig_go_4;

  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt__SWIG_2(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt__SWIG_3(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::InputInt((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt2__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (ImGuiInputTextFlags)_swig_go_2;

  result = (bool)ImGui::InputInt2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt2__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::InputInt2((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt3__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (ImGuiInputTextFlags)_swig_go_2;

  result = (bool)ImGui::InputInt3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt3__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::InputInt3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt4__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (ImGuiInputTextFlags)_swig_go_2;

  result = (bool)ImGui::InputInt4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt4__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::InputInt4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputDouble__SWIG_0(_gostring_ _swig_go_0, double *_swig_go_1, double _swig_go_2, double _swig_go_3, _gostring_ _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(double **)&_swig_go_1;
  arg3 = (double)_swig_go_2;
  arg4 = (double)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (ImGuiInputTextFlags)_swig_go_5;

  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_InputDouble__SWIG_1(_gostring_ _swig_go_0, double *_swig_go_1, double _swig_go_2, double _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(double **)&_swig_go_1;
  arg3 = (double)_swig_go_2;
  arg4 = (double)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_InputDouble__SWIG_2(_gostring_ _swig_go_0, double *_swig_go_1, double _swig_go_2, double _swig_go_3) {
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(double **)&_swig_go_1;
  arg3 = (double)_swig_go_2;
  arg4 = (double)_swig_go_3;

  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputDouble__SWIG_3(_gostring_ _swig_go_0, double *_swig_go_1, double _swig_go_2) {
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(double **)&_swig_go_1;
  arg3 = (double)_swig_go_2;

  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputDouble__SWIG_4(_gostring_ _swig_go_0, double *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(double **)&_swig_go_1;

  result = (bool)ImGui::InputDouble((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputScalar__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, void *_swig_go_3, void *_swig_go_4, _gostring_ _swig_go_5, intgo _swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  ImGuiInputTextFlags arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (ImGuiInputTextFlags)_swig_go_6;

  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_InputScalar__SWIG_1(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, void *_swig_go_3, void *_swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_InputScalar__SWIG_2(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, void *_swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = *(void **)&_swig_go_4;

  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputScalar__SWIG_3(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, void *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;

  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputScalar__SWIG_4(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;

  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputScalarN__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, void *_swig_go_4, void *_swig_go_5, _gostring_ _swig_go_6, intgo _swig_go_7) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiInputTextFlags arg8 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';

  arg8 = (ImGuiInputTextFlags)_swig_go_7;

  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_InputScalarN__SWIG_1(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, void *_swig_go_4, void *_swig_go_5, _gostring_ _swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_InputScalarN__SWIG_2(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, void *_swig_go_4, void *_swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputScalarN__SWIG_3(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3, void *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = *(void **)&_swig_go_4;

  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputScalarN__SWIG_4(_gostring_ _swig_go_0, intgo _swig_go_1, void *_swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDataType)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorEdit3__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorEdit3__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorEdit4__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorEdit4__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker3__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker3__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker4__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, float *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;
  arg4 = *(float **)&_swig_go_3;

  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3,(float const *)arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker4__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker4__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorButton__SWIG_0(_gostring_ _swig_go_0, ImVec4 *_swig_go_1, intgo _swig_go_2, ImVec2 *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  ImVec2 arg4 ;
  ImVec2 *argp4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec4 **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;


  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorButton__SWIG_1(_gostring_ _swig_go_0, ImVec4 *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec4 **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorButton__SWIG_2(_gostring_ _swig_go_0, ImVec4 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec4 **)&_swig_go_1;

  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_SetColorEditOptions(intgo _swig_go_0) {
  ImGuiColorEditFlags arg1 ;

  arg1 = (ImGuiColorEditFlags)_swig_go_0;

  ImGui::SetColorEditOptions(arg1);

}


bool _wrap_TreeNode__SWIG_0(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::TreeNode((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_TreeNode__SWIG_1(_gostring_ _swig_go_0, char *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = _swig_go_1;

  result = (bool)ImGui::TreeNode((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;

  // nothing argout

  free(arg1);

  free(arg2);

  return _swig_go_result;
}


bool _wrap_TreeNode__SWIG_2(void *_swig_go_0, char *_swig_go_1) {
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(void **)&_swig_go_0;
  arg2 = _swig_go_1;

  result = (bool)ImGui::TreeNode((void const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;

  // nothing argout


  free(arg2);

  return _swig_go_result;
}


bool _wrap_TreeNodeEx__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;

  result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_TreeNodeEx__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::TreeNodeEx((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_TreeNodeEx__SWIG_2(_gostring_ _swig_go_0, intgo _swig_go_1, char *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;
  arg3 = _swig_go_2;

  result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;

  // nothing argout

  free(arg1);

  free(arg3);

  return _swig_go_result;
}


bool _wrap_TreeNodeEx__SWIG_3(void *_swig_go_0, intgo _swig_go_1, char *_swig_go_2) {
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(void **)&_swig_go_0;
  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;
  arg3 = _swig_go_2;

  result = (bool)ImGui::TreeNodeEx((void const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;

  // nothing argout


  free(arg3);

  return _swig_go_result;
}


void _wrap_TreePush__SWIG_0(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::TreePush((char const *)arg1);

  free(arg1);
}


void _wrap_TreePush__SWIG_1(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  ImGui::TreePush((void const *)arg1);

}


void _wrap_TreePush__SWIG_2() {
  ImGui::TreePush();

}


void _wrap_TreePop() {
  ImGui::TreePop();

}


void _wrap_TreeAdvanceToLabelPos() {
  ImGui::TreeAdvanceToLabelPos();

}


float _wrap_GetTreeNodeToLabelSpacing() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetTreeNodeToLabelSpacing();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetNextTreeNodeOpen__SWIG_0(bool _swig_go_0, intgo _swig_go_1) {
  bool arg1 ;
  ImGuiCond arg2 ;

  arg1 = (bool)_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetNextTreeNodeOpen(arg1,arg2);

}


void _wrap_SetNextTreeNodeOpen__SWIG_1(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::SetNextTreeNodeOpen(arg1);

}


bool _wrap_CollapsingHeader__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;

  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::CollapsingHeader((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_2(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTreeNodeFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiTreeNodeFlags)_swig_go_2;

  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_3(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_0(_gostring_ _swig_go_0, bool _swig_go_1, intgo _swig_go_2, ImVec2 *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;
  arg3 = (ImGuiSelectableFlags)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_1(_gostring_ _swig_go_0, bool _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;
  arg3 = (ImGuiSelectableFlags)_swig_go_2;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_2(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_3(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::Selectable((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_4(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2, ImVec2 *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiSelectableFlags)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_5(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiSelectableFlags)_swig_go_2;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_6(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBox__SWIG_0(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(char ***)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBox__SWIG_1(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(char ***)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBox__SWIG_2(_gostring_ _swig_go_0, intgo *_swig_go_1, void* _swig_go_2, void *_swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(bool (**)(void *,int,char const **))&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBox__SWIG_3(_gostring_ _swig_go_0, intgo *_swig_go_1, void* _swig_go_2, void *_swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(bool (**)(void *,int,char const **))&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBoxHeader__SWIG_0(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::ListBoxHeader((char const *)arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBoxHeader__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::ListBoxHeader((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBoxHeader__SWIG_2(_gostring_ _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBoxHeader__SWIG_3(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_ListBoxFooter() {
  ImGui::ListBoxFooter();

}


void _wrap_PlotLines__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6, ImVec2 *_swig_go_7, intgo _swig_go_8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  argp8 = (ImVec2 *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg8 = (ImVec2)*argp8;

  arg9 = (int)_swig_go_8;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6, ImVec2 *_swig_go_7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  ImVec2 *argp8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  argp8 = (ImVec2 *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg8 = (ImVec2)*argp8;


  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_4(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_5(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4);

  free(arg1);
}


void _wrap_PlotLines__SWIG_6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3);

  free(arg1);
}


void _wrap_PlotLines__SWIG_7(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6, float _swig_go_7, ImVec2 *_swig_go_8) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  ImVec2 *argp9 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;
  arg8 = (float)_swig_go_7;

  argp9 = (ImVec2 *)_swig_go_8;
  if (argp9 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg9 = (ImVec2)*argp9;


  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);

  free(arg1);
  free(arg6);
}


void _wrap_PlotLines__SWIG_8(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6, float _swig_go_7) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;
  arg8 = (float)_swig_go_7;

  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);

  free(arg1);
  free(arg6);
}


void _wrap_PlotLines__SWIG_9(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);

  free(arg1);
  free(arg6);
}


void _wrap_PlotLines__SWIG_10(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);

  free(arg1);
  free(arg6);
}


void _wrap_PlotLines__SWIG_11(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5);

  free(arg1);
}


void _wrap_PlotLines__SWIG_12(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4);

  free(arg1);
}


void _wrap_PlotHistogram__SWIG_0(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6, ImVec2 *_swig_go_7, intgo _swig_go_8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  argp8 = (ImVec2 *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg8 = (ImVec2)*argp8;

  arg9 = (int)_swig_go_8;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_1(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6, ImVec2 *_swig_go_7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  ImVec2 *argp8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  argp8 = (ImVec2 *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg8 = (ImVec2)*argp8;


  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_2(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_3(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_4(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_5(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4);

  free(arg1);
}


void _wrap_PlotHistogram__SWIG_6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3);

  free(arg1);
}


void _wrap_PlotHistogram__SWIG_7(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6, float _swig_go_7, ImVec2 *_swig_go_8) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  ImVec2 *argp9 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;
  arg8 = (float)_swig_go_7;

  argp9 = (ImVec2 *)_swig_go_8;
  if (argp9 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg9 = (ImVec2)*argp9;


  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);

  free(arg1);
  free(arg6);
}


void _wrap_PlotHistogram__SWIG_8(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6, float _swig_go_7) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;
  arg8 = (float)_swig_go_7;

  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);

  free(arg1);
  free(arg6);
}


void _wrap_PlotHistogram__SWIG_9(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);

  free(arg1);
  free(arg6);
}


void _wrap_PlotHistogram__SWIG_10(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);

  free(arg1);
  free(arg6);
}


void _wrap_PlotHistogram__SWIG_11(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5);

  free(arg1);
}


void _wrap_PlotHistogram__SWIG_12(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4);

  free(arg1);
}


void _wrap_Value__SWIG_0(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  ImGui::Value((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_Value__SWIG_1(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  ImGui::Value((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_ValueUnsigned(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (unsigned int)_swig_go_1;

  ImGui::Value((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_Value__SWIG_2(_gostring_ _swig_go_0, float _swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (float)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  ImGui::Value((char const *)arg1,arg2,(char const *)arg3);

  free(arg1);
  free(arg3);
}


void _wrap_Value__SWIG_3(_gostring_ _swig_go_0, float _swig_go_1) {
  char *arg1 = (char *) 0 ;
  float arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (float)_swig_go_1;

  ImGui::Value((char const *)arg1,arg2);

  free(arg1);
}


bool _wrap_BeginMainMenuBar() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginMainMenuBar();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndMainMenuBar() {
  ImGui::EndMainMenuBar();

}


bool _wrap_BeginMenuBar() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginMenuBar();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndMenuBar() {
  ImGui::EndMenuBar();

}


bool _wrap_BeginMenu__SWIG_0(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::BeginMenu((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginMenu__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginMenu((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_EndMenu() {
  ImGui::EndMenu();

}


bool _wrap_MenuItem__SWIG_0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;
  arg4 = (bool)_swig_go_3;

  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_1(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_2(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_3(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::MenuItem((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_4(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool *_swig_go_2, bool _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = *(bool **)&_swig_go_2;
  arg4 = (bool)_swig_go_3;

  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_5(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = *(bool **)&_swig_go_2;

  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


void _wrap_BeginTooltip() {
  ImGui::BeginTooltip();

}


void _wrap_EndTooltip() {
  ImGui::EndTooltip();

}


void _wrap_SetTooltip(char *_swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;

  arg1 = _swig_go_0;

  ImGui::SetTooltip((char const *)arg1,arg2);


  // nothing argout


  free(arg1);

}


void _wrap_OpenPopup(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::OpenPopup((char const *)arg1);

  free(arg1);
}


bool _wrap_BeginPopup__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImGuiWindowFlags arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiWindowFlags)_swig_go_1;

  result = (bool)ImGui::BeginPopup((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopup__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopup((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextItem__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::BeginPopupContextItem((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextItem__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopupContextItem((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextItem__SWIG_2() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginPopupContextItem();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginPopupContextWindow__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextWindow__SWIG_1(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextWindow__SWIG_2(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextWindow__SWIG_3() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginPopupContextWindow();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginPopupContextVoid__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextVoid__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextVoid__SWIG_2() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginPopupContextVoid();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginPopupModal__SWIG_0(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiWindowFlags)_swig_go_2;

  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupModal__SWIG_1(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupModal__SWIG_2(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopupModal((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_EndPopup() {
  ImGui::EndPopup();

}


bool _wrap_OpenPopupOnItemClick__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::OpenPopupOnItemClick((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_OpenPopupOnItemClick__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::OpenPopupOnItemClick((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_OpenPopupOnItemClick__SWIG_2() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::OpenPopupOnItemClick();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsPopupOpen(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::IsPopupOpen((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_CloseCurrentPopup() {
  ImGui::CloseCurrentPopup();

}


void _wrap_Columns__SWIG_0(intgo _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  arg1 = (int)_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;

  ImGui::Columns(arg1,(char const *)arg2,arg3);

  free(arg2);
}


void _wrap_Columns__SWIG_1(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  char *arg2 = (char *) 0 ;

  arg1 = (int)_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::Columns(arg1,(char const *)arg2);

  free(arg2);
}


void _wrap_Columns__SWIG_2(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::Columns(arg1);

}


void _wrap_Columns__SWIG_3() {
  ImGui::Columns();

}


void _wrap_NextColumn() {
  ImGui::NextColumn();

}


intgo _wrap_GetColumnIndex() {
  int result;
  intgo _swig_go_result;


  result = (int)ImGui::GetColumnIndex();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetColumnWidth__SWIG_0(intgo _swig_go_0) {
  int arg1 ;
  float result;
  float _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (float)ImGui::GetColumnWidth(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetColumnWidth__SWIG_1() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetColumnWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetColumnWidth(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::SetColumnWidth(arg1,arg2);

}


float _wrap_GetColumnOffset__SWIG_0(intgo _swig_go_0) {
  int arg1 ;
  float result;
  float _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (float)ImGui::GetColumnOffset(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetColumnOffset__SWIG_1() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetColumnOffset();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetColumnOffset(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::SetColumnOffset(arg1,arg2);

}


intgo _wrap_GetColumnsCount() {
  int result;
  intgo _swig_go_result;


  result = (int)ImGui::GetColumnsCount();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginTabBar__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImGuiTabBarFlags arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiTabBarFlags)_swig_go_1;

  result = (bool)ImGui::BeginTabBar((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginTabBar__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginTabBar((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_EndTabBar() {
  ImGui::EndTabBar();

}


bool _wrap_BeginTabItem__SWIG_0(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTabItemFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiTabItemFlags)_swig_go_2;

  result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginTabItem__SWIG_1(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginTabItem__SWIG_2(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginTabItem((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_EndTabItem() {
  ImGui::EndTabItem();

}


void _wrap_SetTabItemClosed(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::SetTabItemClosed((char const *)arg1);

  free(arg1);
}


void _wrap_LogToTTY__SWIG_0(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::LogToTTY(arg1);

}


void _wrap_LogToTTY__SWIG_1() {
  ImGui::LogToTTY();

}


void _wrap_LogToFile__SWIG_0(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  char *arg2 = (char *) 0 ;

  arg1 = (int)_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::LogToFile(arg1,(char const *)arg2);

  free(arg2);
}


void _wrap_LogToFile__SWIG_1(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::LogToFile(arg1);

}


void _wrap_LogToFile__SWIG_2() {
  ImGui::LogToFile();

}


void _wrap_LogToClipboard__SWIG_0(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::LogToClipboard(arg1);

}


void _wrap_LogToClipboard__SWIG_1() {
  ImGui::LogToClipboard();

}


void _wrap_LogFinish() {
  ImGui::LogFinish();

}


void _wrap_LogButtons() {
  ImGui::LogButtons();

}


void _wrap_LogText(char *_swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;

  arg1 = _swig_go_0;

  ImGui::LogText((char const *)arg1,arg2);


  // nothing argout


  free(arg1);

}


bool _wrap_BeginDragDropSource__SWIG_0(intgo _swig_go_0) {
  ImGuiDragDropFlags arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiDragDropFlags)_swig_go_0;

  result = (bool)ImGui::BeginDragDropSource(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginDragDropSource__SWIG_1() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginDragDropSource();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_SetDragDropPayload__SWIG_0(_gostring_ _swig_go_0, void *_swig_go_1, long long _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ImGuiCond arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(void **)&_swig_go_1;
  arg3 = (size_t)_swig_go_2;
  arg4 = (ImGuiCond)_swig_go_3;

  result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SetDragDropPayload__SWIG_1(_gostring_ _swig_go_0, void *_swig_go_1, long long _swig_go_2) {
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(void **)&_swig_go_1;
  arg3 = (size_t)_swig_go_2;

  result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_EndDragDropSource() {
  ImGui::EndDragDropSource();

}


bool _wrap_BeginDragDropTarget() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginDragDropTarget();
  _swig_go_result = result;
  return _swig_go_result;
}


ImGuiPayload *_wrap_AcceptDragDropPayload__SWIG_0(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImGuiDragDropFlags arg2 ;
  ImGuiPayload *result = 0 ;
  ImGuiPayload *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiDragDropFlags)_swig_go_1;

  result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1,arg2);
  *(ImGuiPayload **)&_swig_go_result = (ImGuiPayload *)result;
  free(arg1);
  return _swig_go_result;
}


ImGuiPayload *_wrap_AcceptDragDropPayload__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  ImGuiPayload *result = 0 ;
  ImGuiPayload *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1);
  *(ImGuiPayload **)&_swig_go_result = (ImGuiPayload *)result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_EndDragDropTarget() {
  ImGui::EndDragDropTarget();

}


ImGuiPayload *_wrap_GetDragDropPayload() {
  ImGuiPayload *result = 0 ;
  ImGuiPayload *_swig_go_result;


  result = (ImGuiPayload *)ImGui::GetDragDropPayload();
  *(ImGuiPayload **)&_swig_go_result = (ImGuiPayload *)result;
  return _swig_go_result;
}


void _wrap_PushClipRect(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;

  ImGui::PushClipRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);

}


void _wrap_PopClipRect() {
  ImGui::PopClipRect();

}


void _wrap_SetItemDefaultFocus() {
  ImGui::SetItemDefaultFocus();

}


void _wrap_SetKeyboardFocusHere__SWIG_0(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::SetKeyboardFocusHere(arg1);

}


void _wrap_SetKeyboardFocusHere__SWIG_1() {
  ImGui::SetKeyboardFocusHere();

}


bool _wrap_IsItemHovered__SWIG_0(intgo _swig_go_0) {
  ImGuiHoveredFlags arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiHoveredFlags)_swig_go_0;

  result = (bool)ImGui::IsItemHovered(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemHovered__SWIG_1() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemActive() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemActive();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemFocused() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemFocused();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemClicked__SWIG_0(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsItemClicked(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemClicked__SWIG_1() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemClicked();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemVisible() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemVisible();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemEdited() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemEdited();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemActivated() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemActivated();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemDeactivated() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemDeactivated();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemDeactivatedAfterEdit() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemDeactivatedAfterEdit();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsAnyItemHovered() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsAnyItemHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsAnyItemActive() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsAnyItemActive();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsAnyItemFocused() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsAnyItemFocused();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetItemRectMin() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetItemRectMin();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetItemRectMax() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetItemRectMax();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetItemRectSize() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetItemRectSize();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


void _wrap_SetItemAllowOverlap() {
  ImGui::SetItemAllowOverlap();

}


bool _wrap_IsRectVisible__SWIG_0(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsRectVisible__SWIG_1(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


double _wrap_GetTime() {
  double result;
  double _swig_go_result;


  result = (double)ImGui::GetTime();
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetFrameCount() {
  int result;
  intgo _swig_go_result;


  result = (int)ImGui::GetFrameCount();
  _swig_go_result = result;
  return _swig_go_result;
}


ImDrawList *_wrap_GetOverlayDrawList() {
  ImDrawList *result = 0 ;
  ImDrawList *_swig_go_result;


  result = (ImDrawList *)ImGui::GetOverlayDrawList();
  *(ImDrawList **)&_swig_go_result = (ImDrawList *)result;
  return _swig_go_result;
}


ImDrawListSharedData *_wrap_GetDrawListSharedData() {
  ImDrawListSharedData *result = 0 ;
  ImDrawListSharedData *_swig_go_result;


  result = (ImDrawListSharedData *)ImGui::GetDrawListSharedData();
  *(ImDrawListSharedData **)&_swig_go_result = (ImDrawListSharedData *)result;
  return _swig_go_result;
}


_gostring_ _wrap_GetStyleColorName(intgo _swig_go_0) {
  ImGuiCol arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = (ImGuiCol)_swig_go_0;

  result = (char *)ImGui::GetStyleColorName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_SetStateStorage(ImGuiStorage *_swig_go_0) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;

  ImGui::SetStateStorage(arg1);

}


ImGuiStorage *_wrap_GetStateStorage() {
  ImGuiStorage *result = 0 ;
  ImGuiStorage *_swig_go_result;


  result = (ImGuiStorage *)ImGui::GetStateStorage();
  *(ImGuiStorage **)&_swig_go_result = (ImGuiStorage *)result;
  return _swig_go_result;
}


ImVec2 *_wrap_CalcTextSize__SWIG_0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  float arg4 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3,arg4);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcTextSize__SWIG_1(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;

  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcTextSize__SWIG_2(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcTextSize__SWIG_3(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = ImGui::CalcTextSize((char const *)arg1);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg1);
  return _swig_go_result;
}


void _wrap_CalcListClipping(intgo _swig_go_0, float _swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3) {
  int arg1 ;
  float arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;

  ImGui::CalcListClipping(arg1,arg2,arg3,arg4);

}


bool _wrap_BeginChildFrame__SWIG_0(intgo _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiWindowFlags)_swig_go_2;

  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginChildFrame__SWIG_1(intgo _swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndChildFrame() {
  ImGui::EndChildFrame();

}


ImVec4 *_wrap_ColorConvertU32ToFloat4(intgo _swig_go_0) {
  ImU32 arg1 ;
  ImVec4 result;
  ImVec4 *_swig_go_result;

  arg1 = (ImU32)_swig_go_0;

  result = ImGui::ColorConvertU32ToFloat4(arg1);
  *(ImVec4 **)&_swig_go_result = new ImVec4(result);
  return _swig_go_result;
}


intgo _wrap_ColorConvertFloat4ToU32(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (ImU32)ImGui::ColorConvertFloat4ToU32((ImVec4 const &)*arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ColorConvertRGBtoHSV(float _swig_go_0, float _swig_go_1, float _swig_go_2, float *_swig_go_3, float *_swig_go_4, float *_swig_go_5) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(float **)&_swig_go_3;
  arg5 = *(float **)&_swig_go_4;
  arg6 = *(float **)&_swig_go_5;

  ImGui::ColorConvertRGBtoHSV(arg1,arg2,arg3,*arg4,*arg5,*arg6);

}


void _wrap_ColorConvertHSVtoRGB(float _swig_go_0, float _swig_go_1, float _swig_go_2, float *_swig_go_3, float *_swig_go_4, float *_swig_go_5) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(float **)&_swig_go_3;
  arg5 = *(float **)&_swig_go_4;
  arg6 = *(float **)&_swig_go_5;

  ImGui::ColorConvertHSVtoRGB(arg1,arg2,arg3,*arg4,*arg5,*arg6);

}


intgo _wrap_GetKeyIndex(intgo _swig_go_0) {
  ImGuiKey arg1 ;
  int result;
  intgo _swig_go_result;

  arg1 = (ImGuiKey)_swig_go_0;

  result = (int)ImGui::GetKeyIndex(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsKeyDown(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsKeyDown(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsKeyPressed__SWIG_0(intgo _swig_go_0, bool _swig_go_1) {
  int arg1 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::IsKeyPressed(arg1,arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsKeyPressed__SWIG_1(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsKeyPressed(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsKeyReleased(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsKeyReleased(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetKeyPressedAmount(intgo _swig_go_0, float _swig_go_1, float _swig_go_2) {
  int arg1 ;
  float arg2 ;
  float arg3 ;
  int result;
  intgo _swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (int)ImGui::GetKeyPressedAmount(arg1,arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDown(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseDown(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsAnyMouseDown() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsAnyMouseDown();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseClicked__SWIG_0(intgo _swig_go_0, bool _swig_go_1) {
  int arg1 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::IsMouseClicked(arg1,arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseClicked__SWIG_1(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseClicked(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDoubleClicked(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseDoubleClicked(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseReleased(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseReleased(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDragging__SWIG_0(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = (bool)ImGui::IsMouseDragging(arg1,arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDragging__SWIG_1(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseDragging(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDragging__SWIG_2() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsMouseDragging();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseHoveringRect__SWIG_0(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseHoveringRect__SWIG_1(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMousePosValid__SWIG_0(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (bool)ImGui::IsMousePosValid((ImVec2 const *)arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMousePosValid__SWIG_1() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsMousePosValid();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetMousePos() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetMousePos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetMousePosOnOpeningCurrentPopup() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetMousePosOnOpeningCurrentPopup();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetMouseDragDelta__SWIG_0(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = ImGui::GetMouseDragDelta(arg1,arg2);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetMouseDragDelta__SWIG_1(intgo _swig_go_0) {
  int arg1 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = (int)_swig_go_0;

  result = ImGui::GetMouseDragDelta(arg1);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetMouseDragDelta__SWIG_2() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetMouseDragDelta();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


void _wrap_ResetMouseDragDelta__SWIG_0(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::ResetMouseDragDelta(arg1);

}


void _wrap_ResetMouseDragDelta__SWIG_1() {
  ImGui::ResetMouseDragDelta();

}


intgo _wrap_GetMouseCursor() {
  ImGuiMouseCursor result;
  intgo _swig_go_result;


  result = (ImGuiMouseCursor)ImGui::GetMouseCursor();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetMouseCursor(intgo _swig_go_0) {
  ImGuiMouseCursor arg1 ;

  arg1 = (ImGuiMouseCursor)_swig_go_0;

  ImGui::SetMouseCursor(arg1);

}


void _wrap_CaptureKeyboardFromApp__SWIG_0(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::CaptureKeyboardFromApp(arg1);

}


void _wrap_CaptureKeyboardFromApp__SWIG_1() {
  ImGui::CaptureKeyboardFromApp();

}


void _wrap_CaptureMouseFromApp__SWIG_0(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::CaptureMouseFromApp(arg1);

}


void _wrap_CaptureMouseFromApp__SWIG_1() {
  ImGui::CaptureMouseFromApp();

}


_gostring_ _wrap_GetClipboardText() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)ImGui::GetClipboardText();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_SetClipboardText(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::SetClipboardText((char const *)arg1);

  free(arg1);
}


void _wrap_LoadIniSettingsFromDisk(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::LoadIniSettingsFromDisk((char const *)arg1);

  free(arg1);
}


void _wrap_LoadIniSettingsFromMemory__SWIG_0(_gostring_ _swig_go_0, long long _swig_go_1) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (size_t)_swig_go_1;

  ImGui::LoadIniSettingsFromMemory((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_LoadIniSettingsFromMemory__SWIG_1(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::LoadIniSettingsFromMemory((char const *)arg1);

  free(arg1);
}


void _wrap_SaveIniSettingsToDisk(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::SaveIniSettingsToDisk((char const *)arg1);

  free(arg1);
}


_gostring_ _wrap_SaveIniSettingsToMemory__SWIG_0(long long *_swig_go_0) {
  size_t *arg1 = (size_t *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(size_t **)&_swig_go_0;

  result = (char *)ImGui::SaveIniSettingsToMemory(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


_gostring_ _wrap_SaveIniSettingsToMemory__SWIG_1() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)ImGui::SaveIniSettingsToMemory();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_SetAllocatorFunctions__SWIG_0(void* _swig_go_0, void* _swig_go_1, void *_swig_go_2) {
  void *(*arg1)(size_t,void *) = (void *(*)(size_t,void *)) 0 ;
  void (*arg2)(void *,void *) = (void (*)(void *,void *)) 0 ;
  void *arg3 = (void *) 0 ;

  arg1 = *(void *(**)(size_t,void *))&_swig_go_0;
  arg2 = *(void (**)(void *,void *))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;

  ImGui::SetAllocatorFunctions(arg1,arg2,arg3);

}


void _wrap_SetAllocatorFunctions__SWIG_1(void* _swig_go_0, void* _swig_go_1) {
  void *(*arg1)(size_t,void *) = (void *(*)(size_t,void *)) 0 ;
  void (*arg2)(void *,void *) = (void (*)(void *,void *)) 0 ;

  arg1 = *(void *(**)(size_t,void *))&_swig_go_0;
  arg2 = *(void (**)(void *,void *))&_swig_go_1;

  ImGui::SetAllocatorFunctions(arg1,arg2);

}


void *_wrap_MemAlloc(long long _swig_go_0) {
  size_t arg1 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = (size_t)_swig_go_0;

  result = (void *)ImGui::MemAlloc(arg1);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_MemFree(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  ImGui::MemFree(arg1);

}


intgo _wrap_WindowFlags_None() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoTitleBar() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoTitleBar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoResize() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoResize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoMove() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoMove;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoScrollbar() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoScrollbar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoScrollWithMouse() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoScrollWithMouse;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoCollapse() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoCollapse;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_AlwaysAutoResize() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_AlwaysAutoResize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoBackground() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoBackground;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoSavedSettings() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoSavedSettings;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoMouseInputs() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoMouseInputs;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_MenuBar() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_MenuBar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_HorizontalScrollbar() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_HorizontalScrollbar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoFocusOnAppearing() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoFocusOnAppearing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoBringToFrontOnFocus() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoBringToFrontOnFocus;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_AlwaysVerticalScrollbar() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_AlwaysVerticalScrollbar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_AlwaysHorizontalScrollbar() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_AlwaysHorizontalScrollbar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_AlwaysUseWindowPadding() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_AlwaysUseWindowPadding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoNavInputs() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoNavInputs;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoNavFocus() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoNavFocus;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_UnsavedDocument() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_UnsavedDocument;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoNav() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoNav;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoDecoration() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoDecoration;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NoInputs() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoInputs;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_NavFlattened() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NavFlattened;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_ChildWindow() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_ChildWindow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_Tooltip() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_Tooltip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_Popup() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_Popup;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_Modal() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_Modal;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_WindowFlags_ChildMenu() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_ChildMenu;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_None() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CharsDecimal() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsDecimal;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CharsHexadecimal() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsHexadecimal;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CharsUppercase() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsUppercase;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CharsNoBlank() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsNoBlank;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_AutoSelectAll() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_AutoSelectAll;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_EnterReturnsTrue() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_EnterReturnsTrue;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CallbackCompletion() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackCompletion;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CallbackHistory() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackHistory;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CallbackAlways() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackAlways;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CallbackCharFilter() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackCharFilter;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_AllowTabInput() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_AllowTabInput;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CtrlEnterForNewLine() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CtrlEnterForNewLine;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_NoHorizontalScroll() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_NoHorizontalScroll;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_AlwaysInsertMode() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_AlwaysInsertMode;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_ReadOnly() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_ReadOnly;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_Password() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_Password;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_NoUndoRedo() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_NoUndoRedo;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CharsScientific() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsScientific;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_CallbackResize() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackResize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_InputTextFlags_Multiline() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_Multiline;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_None() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_Selected() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_Selected;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_Framed() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_Framed;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_AllowItemOverlap() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_AllowItemOverlap;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_NoTreePushOnOpen() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_NoTreePushOnOpen;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_NoAutoOpenOnLog() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_NoAutoOpenOnLog;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_DefaultOpen() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_DefaultOpen;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_OpenOnDoubleClick() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_OpenOnDoubleClick;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_OpenOnArrow() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_OpenOnArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_Leaf() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_Leaf;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_Bullet() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_Bullet;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_FramePadding() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_FramePadding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_NavLeftJumpsBackHere() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_NavLeftJumpsBackHere;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TreeNodeFlags_CollapsingHeader() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_CollapsingHeader;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_SelectableFlags_None() {
  ImGuiSelectableFlags_ result;
  intgo _swig_go_result;


  result = ImGuiSelectableFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_SelectableFlags_DontClosePopups() {
  ImGuiSelectableFlags_ result;
  intgo _swig_go_result;


  result = ImGuiSelectableFlags_DontClosePopups;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_SelectableFlags_SpanAllColumns() {
  ImGuiSelectableFlags_ result;
  intgo _swig_go_result;


  result = ImGuiSelectableFlags_SpanAllColumns;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_SelectableFlags_AllowDoubleClick() {
  ImGuiSelectableFlags_ result;
  intgo _swig_go_result;


  result = ImGuiSelectableFlags_AllowDoubleClick;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_SelectableFlags_Disabled() {
  ImGuiSelectableFlags_ result;
  intgo _swig_go_result;


  result = ImGuiSelectableFlags_Disabled;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_None() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_PopupAlignLeft() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_PopupAlignLeft;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_HeightSmall() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_HeightSmall;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_HeightRegular() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_HeightRegular;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_HeightLarge() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_HeightLarge;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_HeightLargest() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_HeightLargest;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_NoArrowButton() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_NoArrowButton;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_NoPreview() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_NoPreview;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ComboFlags_HeightMask_() {
  ImGuiComboFlags_ result;
  intgo _swig_go_result;


  result = ImGuiComboFlags_HeightMask_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_None() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_Reorderable() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_Reorderable;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_AutoSelectNewTabs() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_AutoSelectNewTabs;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_TabListPopupButton() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_TabListPopupButton;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_NoCloseWithMiddleMouseButton() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_NoCloseWithMiddleMouseButton;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_NoTabListScrollingButtons() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_NoTabListScrollingButtons;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_NoTooltip() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_NoTooltip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_FittingPolicyResizeDown() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_FittingPolicyResizeDown;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_FittingPolicyScroll() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_FittingPolicyScroll;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_FittingPolicyMask_() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_FittingPolicyMask_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabBarFlags_FittingPolicyDefault_() {
  ImGuiTabBarFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabBarFlags_FittingPolicyDefault_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabItemFlags_None() {
  ImGuiTabItemFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabItemFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabItemFlags_UnsavedDocument() {
  ImGuiTabItemFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabItemFlags_UnsavedDocument;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabItemFlags_SetSelected() {
  ImGuiTabItemFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabItemFlags_SetSelected;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabItemFlags_NoCloseWithMiddleMouseButton() {
  ImGuiTabItemFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabItemFlags_NoCloseWithMiddleMouseButton;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_TabItemFlags_NoPushId() {
  ImGuiTabItemFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTabItemFlags_NoPushId;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_FocusedFlags_None() {
  ImGuiFocusedFlags_ result;
  intgo _swig_go_result;


  result = ImGuiFocusedFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_FocusedFlags_ChildWindows() {
  ImGuiFocusedFlags_ result;
  intgo _swig_go_result;


  result = ImGuiFocusedFlags_ChildWindows;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_FocusedFlags_RootWindow() {
  ImGuiFocusedFlags_ result;
  intgo _swig_go_result;


  result = ImGuiFocusedFlags_RootWindow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_FocusedFlags_AnyWindow() {
  ImGuiFocusedFlags_ result;
  intgo _swig_go_result;


  result = ImGuiFocusedFlags_AnyWindow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_FocusedFlags_RootAndChildWindows() {
  ImGuiFocusedFlags_ result;
  intgo _swig_go_result;


  result = ImGuiFocusedFlags_RootAndChildWindows;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_None() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_ChildWindows() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_ChildWindows;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_RootWindow() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_RootWindow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_AnyWindow() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_AnyWindow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_AllowWhenBlockedByPopup() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_AllowWhenBlockedByPopup;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_AllowWhenBlockedByActiveItem() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_AllowWhenBlockedByActiveItem;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_AllowWhenOverlapped() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_AllowWhenOverlapped;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_AllowWhenDisabled() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_AllowWhenDisabled;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_RectOnly() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_RectOnly;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_HoveredFlags_RootAndChildWindows() {
  ImGuiHoveredFlags_ result;
  intgo _swig_go_result;


  result = ImGuiHoveredFlags_RootAndChildWindows;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_None() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_SourceNoPreviewTooltip() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_SourceNoPreviewTooltip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_SourceNoDisableHover() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_SourceNoDisableHover;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_SourceNoHoldToOpenOthers() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_SourceNoHoldToOpenOthers;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_SourceAllowNullID() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_SourceAllowNullID;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_SourceExtern() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_SourceExtern;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_SourceAutoExpirePayload() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_SourceAutoExpirePayload;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_AcceptBeforeDelivery() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_AcceptBeforeDelivery;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_AcceptNoDrawDefaultRect() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_AcceptNoDrawDefaultRect;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_AcceptNoPreviewTooltip() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_AcceptNoPreviewTooltip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DragDropFlags_AcceptPeekOnly() {
  ImGuiDragDropFlags_ result;
  intgo _swig_go_result;


  result = ImGuiDragDropFlags_AcceptPeekOnly;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DataType_S32() {
  ImGuiDataType_ result;
  intgo _swig_go_result;


  result = ImGuiDataType_S32;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DataType_U32() {
  ImGuiDataType_ result;
  intgo _swig_go_result;


  result = ImGuiDataType_U32;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DataType_S64() {
  ImGuiDataType_ result;
  intgo _swig_go_result;


  result = ImGuiDataType_S64;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DataType_U64() {
  ImGuiDataType_ result;
  intgo _swig_go_result;


  result = ImGuiDataType_U64;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DataType_Float() {
  ImGuiDataType_ result;
  intgo _swig_go_result;


  result = ImGuiDataType_Float;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DataType_Double() {
  ImGuiDataType_ result;
  intgo _swig_go_result;


  result = ImGuiDataType_Double;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DataType_COUNT() {
  ImGuiDataType_ result;
  intgo _swig_go_result;


  result = ImGuiDataType_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Dir_None() {
  ImGuiDir_ result;
  intgo _swig_go_result;


  result = ImGuiDir_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Dir_Left() {
  ImGuiDir_ result;
  intgo _swig_go_result;


  result = ImGuiDir_Left;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Dir_Right() {
  ImGuiDir_ result;
  intgo _swig_go_result;


  result = ImGuiDir_Right;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Dir_Up() {
  ImGuiDir_ result;
  intgo _swig_go_result;


  result = ImGuiDir_Up;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Dir_Down() {
  ImGuiDir_ result;
  intgo _swig_go_result;


  result = ImGuiDir_Down;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Dir_COUNT() {
  ImGuiDir_ result;
  intgo _swig_go_result;


  result = ImGuiDir_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Tab() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Tab;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_LeftArrow() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_LeftArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_RightArrow() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_RightArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_UpArrow() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_UpArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_DownArrow() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_DownArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_PageUp() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_PageUp;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_PageDown() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_PageDown;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Home() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Home;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_End() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_End;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Insert() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Insert;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Delete() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Delete;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Backspace() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Backspace;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Space() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Space;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Enter() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Enter;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Escape() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Escape;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_A() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_A;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_C() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_C;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_V() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_V;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_X() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_X;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Y() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Y;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_Z() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Z;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Key_COUNT() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_Activate() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_Activate;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_Cancel() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_Cancel;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_Input() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_Input;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_Menu() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_Menu;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_DpadLeft() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_DpadLeft;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_DpadRight() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_DpadRight;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_DpadUp() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_DpadUp;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_DpadDown() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_DpadDown;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_LStickLeft() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_LStickLeft;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_LStickRight() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_LStickRight;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_LStickUp() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_LStickUp;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_LStickDown() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_LStickDown;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_FocusPrev() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_FocusPrev;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_FocusNext() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_FocusNext;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_TweakSlow() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_TweakSlow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_TweakFast() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_TweakFast;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_KeyMenu_() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_KeyMenu_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_KeyLeft_() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_KeyLeft_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_KeyRight_() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_KeyRight_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_KeyUp_() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_KeyUp_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_KeyDown_() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_KeyDown_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_COUNT() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NavInput_InternalStart_() {
  ImGuiNavInput_ result;
  intgo _swig_go_result;


  result = ImGuiNavInput_InternalStart_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_None() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_NavEnableKeyboard() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_NavEnableKeyboard;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_NavEnableGamepad() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_NavEnableGamepad;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_NavEnableSetMousePos() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_NavEnableSetMousePos;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_NavNoCaptureKeyboard() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_NavNoCaptureKeyboard;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_NoMouse() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_NoMouse;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_NoMouseCursorChange() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_NoMouseCursorChange;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_IsSRGB() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_IsSRGB;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ConfigFlags_IsTouchScreen() {
  ImGuiConfigFlags_ result;
  intgo _swig_go_result;


  result = ImGuiConfigFlags_IsTouchScreen;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_BackendFlags_None() {
  ImGuiBackendFlags_ result;
  intgo _swig_go_result;


  result = ImGuiBackendFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_BackendFlags_HasGamepad() {
  ImGuiBackendFlags_ result;
  intgo _swig_go_result;


  result = ImGuiBackendFlags_HasGamepad;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_BackendFlags_HasMouseCursors() {
  ImGuiBackendFlags_ result;
  intgo _swig_go_result;


  result = ImGuiBackendFlags_HasMouseCursors;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_BackendFlags_HasSetMousePos() {
  ImGuiBackendFlags_ result;
  intgo _swig_go_result;


  result = ImGuiBackendFlags_HasSetMousePos;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_Text() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Text;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TextDisabled() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TextDisabled;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_WindowBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_WindowBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ChildBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ChildBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_PopupBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PopupBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_Border() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Border;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_BorderShadow() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_BorderShadow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_FrameBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_FrameBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_FrameBgHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_FrameBgHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_FrameBgActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_FrameBgActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TitleBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TitleBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TitleBgActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TitleBgActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TitleBgCollapsed() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TitleBgCollapsed;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_MenuBarBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_MenuBarBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ScrollbarBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ScrollbarBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ScrollbarGrab() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ScrollbarGrab;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ScrollbarGrabHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ScrollbarGrabHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ScrollbarGrabActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ScrollbarGrabActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_CheckMark() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_CheckMark;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_SliderGrab() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_SliderGrab;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_SliderGrabActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_SliderGrabActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_Button() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Button;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ButtonHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ButtonHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ButtonActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ButtonActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_Header() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Header;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_HeaderHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_HeaderHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_HeaderActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_HeaderActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_Separator() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Separator;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_SeparatorHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_SeparatorHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_SeparatorActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_SeparatorActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ResizeGrip() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ResizeGrip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ResizeGripHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ResizeGripHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ResizeGripActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ResizeGripActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_Tab() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Tab;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TabHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TabHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TabActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TabActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TabUnfocused() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TabUnfocused;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TabUnfocusedActive() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TabUnfocusedActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_PlotLines() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PlotLines;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_PlotLinesHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PlotLinesHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_PlotHistogram() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PlotHistogram;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_PlotHistogramHovered() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PlotHistogramHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_TextSelectedBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TextSelectedBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_DragDropTarget() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_DragDropTarget;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_NavHighlight() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_NavHighlight;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_NavWindowingHighlight() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_NavWindowingHighlight;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_NavWindowingDimBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_NavWindowingDimBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_ModalWindowDimBg() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ModalWindowDimBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Col_COUNT() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_Alpha() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_Alpha;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_WindowPadding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_WindowPadding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_WindowRounding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_WindowRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_WindowBorderSize() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_WindowBorderSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_WindowMinSize() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_WindowMinSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_WindowTitleAlign() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_WindowTitleAlign;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_ChildRounding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ChildRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_ChildBorderSize() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ChildBorderSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_PopupRounding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_PopupRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_PopupBorderSize() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_PopupBorderSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_FramePadding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_FramePadding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_FrameRounding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_FrameRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_FrameBorderSize() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_FrameBorderSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_ItemSpacing() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ItemSpacing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_ItemInnerSpacing() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ItemInnerSpacing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_IndentSpacing() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_IndentSpacing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_ScrollbarSize() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ScrollbarSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_ScrollbarRounding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ScrollbarRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_GrabMinSize() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_GrabMinSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_GrabRounding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_GrabRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_TabRounding() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_TabRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_ButtonTextAlign() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ButtonTextAlign;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_SelectableTextAlign() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_SelectableTextAlign;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_StyleVar_COUNT() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_None() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoAlpha() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoAlpha;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoPicker() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoPicker;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoOptions() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoOptions;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoSmallPreview() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoSmallPreview;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoInputs() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoInputs;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoTooltip() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoTooltip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoLabel() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoLabel;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoSidePreview() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoSidePreview;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_NoDragDrop() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoDragDrop;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_AlphaBar() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_AlphaBar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_AlphaPreview() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_AlphaPreview;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_AlphaPreviewHalf() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_AlphaPreviewHalf;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_HDR() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_HDR;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_RGB() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_RGB;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_HSV() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_HSV;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_HEX() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_HEX;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_Uint8() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_Uint8;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_Float() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_Float;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_PickerHueBar() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_PickerHueBar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags_PickerHueWheel() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_PickerHueWheel;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags__InputsMask() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags__InputsMask;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags__DataTypeMask() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags__DataTypeMask;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags__PickerMask() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags__PickerMask;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ColorEditFlags__OptionsDefault() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags__OptionsDefault;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_None() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_Arrow() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_Arrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_TextInput() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_TextInput;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_ResizeAll() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeAll;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_ResizeNS() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeNS;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_ResizeEW() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeEW;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_ResizeNESW() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeNESW;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_ResizeNWSE() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeNWSE;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_Hand() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_Hand;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_MouseCursor_COUNT() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Cond_Always() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiCond_Always;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Cond_Once() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiCond_Once;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Cond_FirstUseEver() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiCond_FirstUseEver;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_Cond_Appearing() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiCond_Appearing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_Style_Alpha_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Alpha = arg2;

}


float _wrap_Style_Alpha_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->Alpha);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_WindowPadding_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->WindowPadding = *arg2;

}


ImVec2 *_wrap_Style_WindowPadding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->WindowPadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_WindowRounding_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->WindowRounding = arg2;

}


float _wrap_Style_WindowRounding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->WindowRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_WindowBorderSize_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->WindowBorderSize = arg2;

}


float _wrap_Style_WindowBorderSize_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->WindowBorderSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_WindowMinSize_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->WindowMinSize = *arg2;

}


ImVec2 *_wrap_Style_WindowMinSize_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->WindowMinSize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_WindowTitleAlign_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->WindowTitleAlign = *arg2;

}


ImVec2 *_wrap_Style_WindowTitleAlign_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->WindowTitleAlign);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_ChildRounding_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ChildRounding = arg2;

}


float _wrap_Style_ChildRounding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ChildRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_ChildBorderSize_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ChildBorderSize = arg2;

}


float _wrap_Style_ChildBorderSize_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ChildBorderSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_PopupRounding_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->PopupRounding = arg2;

}


float _wrap_Style_PopupRounding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->PopupRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_PopupBorderSize_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->PopupBorderSize = arg2;

}


float _wrap_Style_PopupBorderSize_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->PopupBorderSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_FramePadding_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->FramePadding = *arg2;

}


ImVec2 *_wrap_Style_FramePadding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->FramePadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_FrameRounding_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->FrameRounding = arg2;

}


float _wrap_Style_FrameRounding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->FrameRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_FrameBorderSize_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->FrameBorderSize = arg2;

}


float _wrap_Style_FrameBorderSize_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->FrameBorderSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_ItemSpacing_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->ItemSpacing = *arg2;

}


ImVec2 *_wrap_Style_ItemSpacing_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->ItemSpacing);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_ItemInnerSpacing_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->ItemInnerSpacing = *arg2;

}


ImVec2 *_wrap_Style_ItemInnerSpacing_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->ItemInnerSpacing);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_TouchExtraPadding_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->TouchExtraPadding = *arg2;

}


ImVec2 *_wrap_Style_TouchExtraPadding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->TouchExtraPadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_IndentSpacing_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->IndentSpacing = arg2;

}


float _wrap_Style_IndentSpacing_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->IndentSpacing);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_ColumnsMinSpacing_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ColumnsMinSpacing = arg2;

}


float _wrap_Style_ColumnsMinSpacing_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ColumnsMinSpacing);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_ScrollbarSize_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ScrollbarSize = arg2;

}


float _wrap_Style_ScrollbarSize_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ScrollbarSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_ScrollbarRounding_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ScrollbarRounding = arg2;

}


float _wrap_Style_ScrollbarRounding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ScrollbarRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_GrabMinSize_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->GrabMinSize = arg2;

}


float _wrap_Style_GrabMinSize_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->GrabMinSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_GrabRounding_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->GrabRounding = arg2;

}


float _wrap_Style_GrabRounding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->GrabRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_TabRounding_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->TabRounding = arg2;

}


float _wrap_Style_TabRounding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->TabRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_TabBorderSize_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->TabBorderSize = arg2;

}


float _wrap_Style_TabBorderSize_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->TabBorderSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_ButtonTextAlign_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->ButtonTextAlign = *arg2;

}


ImVec2 *_wrap_Style_ButtonTextAlign_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->ButtonTextAlign);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_SelectableTextAlign_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->SelectableTextAlign = *arg2;

}


ImVec2 *_wrap_Style_SelectableTextAlign_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->SelectableTextAlign);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_DisplayWindowPadding_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplayWindowPadding = *arg2;

}


ImVec2 *_wrap_Style_DisplayWindowPadding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplayWindowPadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_DisplaySafeAreaPadding_set(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplaySafeAreaPadding = *arg2;

}


ImVec2 *_wrap_Style_DisplaySafeAreaPadding_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplaySafeAreaPadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_Style_MouseCursorScale_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseCursorScale = arg2;

}


float _wrap_Style_MouseCursorScale_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->MouseCursorScale);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_AntiAliasedLines_set(ImGuiStyle *_swig_go_0, bool _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->AntiAliasedLines = arg2;

}


bool _wrap_Style_AntiAliasedLines_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (bool) ((arg1)->AntiAliasedLines);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_AntiAliasedFill_set(ImGuiStyle *_swig_go_0, bool _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->AntiAliasedFill = arg2;

}


bool _wrap_Style_AntiAliasedFill_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (bool) ((arg1)->AntiAliasedFill);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_CurveTessellationTol_set(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->CurveTessellationTol = arg2;

}


float _wrap_Style_CurveTessellationTol_get(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->CurveTessellationTol);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Style_Colors_set(ImGuiStyle *_swig_go_0, ImVec4 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec4 **)&_swig_go_1;

  {
    size_t ii;
    ImVec4 *b = (ImVec4 *) arg1->Colors;
    for (ii = 0; ii < (size_t)ImGuiCol_COUNT; ii++) b[ii] = *((ImVec4 *) arg2 + ii);
  }

}


ImVec4 (*_wrap_Style_Colors_get(ImGuiStyle *_swig_go_0))[ImGuiCol_COUNT] {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *result = 0 ;
  ImVec4 (*_swig_go_result)[ImGuiCol_COUNT];

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec4 *)(ImVec4 *) ((arg1)->Colors);
  *(ImVec4 **)&_swig_go_result = result;
  return _swig_go_result;
}


ImGuiStyle *_wrap_new_Style() {
  ImGuiStyle *result = 0 ;
  ImGuiStyle *_swig_go_result;


  result = (ImGuiStyle *)new ImGuiStyle();
  *(ImGuiStyle **)&_swig_go_result = (ImGuiStyle *)result;
  return _swig_go_result;
}


void _wrap_Style_ScaleAllSizes(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  (arg1)->ScaleAllSizes(arg2);

}


void _wrap_delete_Style(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  delete arg1;

}


void _wrap_IO_ConfigFlags_set(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiConfigFlags arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (ImGuiConfigFlags)_swig_go_1;

  if (arg1) (arg1)->ConfigFlags = arg2;

}


intgo _wrap_IO_ConfigFlags_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiConfigFlags result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImGuiConfigFlags) ((arg1)->ConfigFlags);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_BackendFlags_set(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiBackendFlags arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (ImGuiBackendFlags)_swig_go_1;

  if (arg1) (arg1)->BackendFlags = arg2;

}


intgo _wrap_IO_BackendFlags_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiBackendFlags result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImGuiBackendFlags) ((arg1)->BackendFlags);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_DisplaySize_set(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplaySize = *arg2;

}


ImVec2 *_wrap_IO_DisplaySize_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplaySize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_IO_DeltaTime_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->DeltaTime = arg2;

}


float _wrap_IO_DeltaTime_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->DeltaTime);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_IniSavingRate_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->IniSavingRate = arg2;

}


float _wrap_IO_IniSavingRate_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->IniSavingRate);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_IniFilename_set(ImGuiIO *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->IniFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->IniFilename, (const char *)arg2);
    } else {
      arg1->IniFilename = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_IO_IniFilename_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (char *) ((arg1)->IniFilename);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_IO_LogFilename_set(ImGuiIO *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->LogFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->LogFilename, (const char *)arg2);
    } else {
      arg1->LogFilename = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_IO_LogFilename_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (char *) ((arg1)->LogFilename);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_IO_MouseDoubleClickTime_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseDoubleClickTime = arg2;

}


float _wrap_IO_MouseDoubleClickTime_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseDoubleClickTime);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MouseDoubleClickMaxDist_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseDoubleClickMaxDist = arg2;

}


float _wrap_IO_MouseDoubleClickMaxDist_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseDoubleClickMaxDist);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MouseDragThreshold_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseDragThreshold = arg2;

}


float _wrap_IO_MouseDragThreshold_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseDragThreshold);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_KeyMap_set(ImGuiIO *_swig_go_0, intgo *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(int **)&_swig_go_1;

  {
    size_t ii;
    int *b = (int *) arg1->KeyMap;
    for (ii = 0; ii < (size_t)ImGuiKey_COUNT; ii++) b[ii] = *((int *) arg2 + ii);
  }

}


intgo *_wrap_IO_KeyMap_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *result = 0 ;
  intgo *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int *)(int *) ((arg1)->KeyMap);
  *(int **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_KeyRepeatDelay_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->KeyRepeatDelay = arg2;

}


float _wrap_IO_KeyRepeatDelay_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->KeyRepeatDelay);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_KeyRepeatRate_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->KeyRepeatRate = arg2;

}


float _wrap_IO_KeyRepeatRate_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->KeyRepeatRate);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_UserData_set(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->UserData = arg2;

}


void *_wrap_IO_UserData_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->UserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_IO_Fonts_set(ImGuiIO *_swig_go_0, ImFontAtlas *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImFontAtlas **)&_swig_go_1;

  if (arg1) (arg1)->Fonts = arg2;

}


ImFontAtlas *_wrap_IO_Fonts_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *result = 0 ;
  ImFontAtlas *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImFontAtlas *) ((arg1)->Fonts);
  *(ImFontAtlas **)&_swig_go_result = (ImFontAtlas *)result;
  return _swig_go_result;
}


void _wrap_IO_FontGlobalScale_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->FontGlobalScale = arg2;

}


float _wrap_IO_FontGlobalScale_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->FontGlobalScale);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_FontAllowUserScaling_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->FontAllowUserScaling = arg2;

}


bool _wrap_IO_FontAllowUserScaling_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->FontAllowUserScaling);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_FontDefault_set(ImGuiIO *_swig_go_0, ImFont *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;

  if (arg1) (arg1)->FontDefault = arg2;

}


ImFont *_wrap_IO_FontDefault_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImFont *) ((arg1)->FontDefault);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


void _wrap_IO_DisplayFramebufferScale_set(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplayFramebufferScale = *arg2;

}


ImVec2 *_wrap_IO_DisplayFramebufferScale_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplayFramebufferScale);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_IO_MouseDrawCursor_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->MouseDrawCursor = arg2;

}


bool _wrap_IO_MouseDrawCursor_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->MouseDrawCursor);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_ConfigMacOSXBehaviors_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->ConfigMacOSXBehaviors = arg2;

}


bool _wrap_IO_ConfigMacOSXBehaviors_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->ConfigMacOSXBehaviors);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_ConfigInputTextCursorBlink_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->ConfigInputTextCursorBlink = arg2;

}


bool _wrap_IO_ConfigInputTextCursorBlink_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->ConfigInputTextCursorBlink);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_ConfigWindowsResizeFromEdges_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->ConfigWindowsResizeFromEdges = arg2;

}


bool _wrap_IO_ConfigWindowsResizeFromEdges_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->ConfigWindowsResizeFromEdges);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_ConfigWindowsMoveFromTitleBarOnly_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->ConfigWindowsMoveFromTitleBarOnly = arg2;

}


bool _wrap_IO_ConfigWindowsMoveFromTitleBarOnly_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->ConfigWindowsMoveFromTitleBarOnly);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_BackendPlatformName_set(ImGuiIO *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->BackendPlatformName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BackendPlatformName, (const char *)arg2);
    } else {
      arg1->BackendPlatformName = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_IO_BackendPlatformName_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (char *) ((arg1)->BackendPlatformName);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_IO_BackendRendererName_set(ImGuiIO *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->BackendRendererName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BackendRendererName, (const char *)arg2);
    } else {
      arg1->BackendRendererName = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_IO_BackendRendererName_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (char *) ((arg1)->BackendRendererName);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_IO_BackendPlatformUserData_set(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->BackendPlatformUserData = arg2;

}


void *_wrap_IO_BackendPlatformUserData_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->BackendPlatformUserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_IO_BackendRendererUserData_set(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->BackendRendererUserData = arg2;

}


void *_wrap_IO_BackendRendererUserData_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->BackendRendererUserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_IO_BackendLanguageUserData_set(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->BackendLanguageUserData = arg2;

}


void *_wrap_IO_BackendLanguageUserData_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->BackendLanguageUserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_IO_GetClipboardTextFn_set(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*arg2)(void *) = (char *(*)(void *)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(char *(**)(void *))&_swig_go_1;

  if (arg1) (arg1)->GetClipboardTextFn = (char const *(*)(void *))arg2;

}


void* _wrap_IO_GetClipboardTextFn_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*result)(void *) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (char *(*)(void *)) ((arg1)->GetClipboardTextFn);
  *(char *(**)(void *))&_swig_go_result = (char *(*)(void *))result;
  return _swig_go_result;
}


void _wrap_IO_SetClipboardTextFn_set(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(void *,char const *) = (void (*)(void *,char const *)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void (**)(void *,char const *))&_swig_go_1;

  if (arg1) (arg1)->SetClipboardTextFn = arg2;

}


void* _wrap_IO_SetClipboardTextFn_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(void *,char const *) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void (*)(void *,char const *)) ((arg1)->SetClipboardTextFn);
  *(void (**)(void *,char const *))&_swig_go_result = (void (*)(void *,char const *))result;
  return _swig_go_result;
}


void _wrap_IO_ClipboardUserData_set(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->ClipboardUserData = arg2;

}


void *_wrap_IO_ClipboardUserData_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->ClipboardUserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_IO_ImeSetInputScreenPosFn_set(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(int,int) = (void (*)(int,int)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void (**)(int,int))&_swig_go_1;

  if (arg1) (arg1)->ImeSetInputScreenPosFn = arg2;

}


void* _wrap_IO_ImeSetInputScreenPosFn_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(int,int) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void (*)(int,int)) ((arg1)->ImeSetInputScreenPosFn);
  *(void (**)(int,int))&_swig_go_result = (void (*)(int,int))result;
  return _swig_go_result;
}


void _wrap_IO_ImeWindowHandle_set(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->ImeWindowHandle = arg2;

}


void *_wrap_IO_ImeWindowHandle_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->ImeWindowHandle);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_IO_MousePos_set(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->MousePos = *arg2;

}


ImVec2 *_wrap_IO_MousePos_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->MousePos);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_IO_MouseDown_set(ImGuiIO *_swig_go_0, bool *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(bool **)&_swig_go_1;

  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDown;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }

}


_goslice_ _wrap_IO_MouseDown_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  _goslice_ _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool *)(bool *) ((arg1)->MouseDown);
  _swig_go_result.array = result; _swig_go_result.len = 5; _swig_go_result.cap = 5;
  return _swig_go_result;
}


void _wrap_IO_MouseWheel_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseWheel = arg2;

}


float _wrap_IO_MouseWheel_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseWheel);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MouseWheelH_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseWheelH = arg2;

}


float _wrap_IO_MouseWheelH_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseWheelH);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_KeyCtrl_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->KeyCtrl = arg2;

}


bool _wrap_IO_KeyCtrl_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->KeyCtrl);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_KeyShift_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->KeyShift = arg2;

}


bool _wrap_IO_KeyShift_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->KeyShift);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_KeyAlt_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->KeyAlt = arg2;

}


bool _wrap_IO_KeyAlt_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->KeyAlt);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_KeySuper_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->KeySuper = arg2;

}


bool _wrap_IO_KeySuper_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->KeySuper);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_KeysDown_set(ImGuiIO *_swig_go_0, bool *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(bool **)&_swig_go_1;

  {
    size_t ii;
    bool *b = (bool *) arg1->KeysDown;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((bool *) arg2 + ii);
  }

}


_goslice_ _wrap_IO_KeysDown_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  _goslice_ _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool *)(bool *) ((arg1)->KeysDown);
  _swig_go_result.array = result; _swig_go_result.len = 512; _swig_go_result.cap = 512;
  return _swig_go_result;
}


void _wrap_IO_NavInputs_set(ImGuiIO *_swig_go_0, float *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(float **)&_swig_go_1;

  {
    size_t ii;
    float *b = (float *) arg1->NavInputs;
    for (ii = 0; ii < (size_t)ImGuiNavInput_COUNT; ii++) b[ii] = *((float *) arg2 + ii);
  }

}


float *_wrap_IO_NavInputs_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float *)(float *) ((arg1)->NavInputs);
  *(float **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_AddInputCharacter(ImGuiIO *_swig_go_0, short _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  (arg1)->AddInputCharacter(arg2);

}


void _wrap_IO_AddInputCharactersUTF8(ImGuiIO *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  (arg1)->AddInputCharactersUTF8((char const *)arg2);

  free(arg2);
}


void _wrap_IO_ClearInputCharacters(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  (arg1)->ClearInputCharacters();

}


void _wrap_IO_WantCaptureMouse_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->WantCaptureMouse = arg2;

}


bool _wrap_IO_WantCaptureMouse_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->WantCaptureMouse);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_WantCaptureKeyboard_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->WantCaptureKeyboard = arg2;

}


bool _wrap_IO_WantCaptureKeyboard_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->WantCaptureKeyboard);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_WantTextInput_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->WantTextInput = arg2;

}


bool _wrap_IO_WantTextInput_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->WantTextInput);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_WantSetMousePos_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->WantSetMousePos = arg2;

}


bool _wrap_IO_WantSetMousePos_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->WantSetMousePos);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_WantSaveIniSettings_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->WantSaveIniSettings = arg2;

}


bool _wrap_IO_WantSaveIniSettings_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->WantSaveIniSettings);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_NavActive_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->NavActive = arg2;

}


bool _wrap_IO_NavActive_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->NavActive);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_NavVisible_set(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->NavVisible = arg2;

}


bool _wrap_IO_NavVisible_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->NavVisible);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_Framerate_set(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Framerate = arg2;

}


float _wrap_IO_Framerate_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->Framerate);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MetricsRenderVertices_set(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsRenderVertices = arg2;

}


intgo _wrap_IO_MetricsRenderVertices_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsRenderVertices);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MetricsRenderIndices_set(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsRenderIndices = arg2;

}


intgo _wrap_IO_MetricsRenderIndices_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsRenderIndices);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MetricsRenderWindows_set(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsRenderWindows = arg2;

}


intgo _wrap_IO_MetricsRenderWindows_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsRenderWindows);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MetricsActiveWindows_set(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsActiveWindows = arg2;

}


intgo _wrap_IO_MetricsActiveWindows_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsActiveWindows);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MetricsActiveAllocations_set(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsActiveAllocations = arg2;

}


intgo _wrap_IO_MetricsActiveAllocations_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsActiveAllocations);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_IO_MouseDelta_set(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->MouseDelta = *arg2;

}


ImVec2 *_wrap_IO_MouseDelta_get(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->MouseDelta);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


ImGuiIO *_wrap_new_IO() {
  ImGuiIO *result = 0 ;
  ImGuiIO *_swig_go_result;


  result = (ImGuiIO *)new ImGuiIO();
  *(ImGuiIO **)&_swig_go_result = (ImGuiIO *)result;
  return _swig_go_result;
}


void _wrap_delete_IO(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  delete arg1;

}


void _wrap_InputTextCallbackData_EventFlag_set(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (ImGuiInputTextFlags)_swig_go_1;

  if (arg1) (arg1)->EventFlag = arg2;

}


intgo _wrap_InputTextCallbackData_EventFlag_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  intgo _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (ImGuiInputTextFlags) ((arg1)->EventFlag);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_Flags_set(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (ImGuiInputTextFlags)_swig_go_1;

  if (arg1) (arg1)->Flags = arg2;

}


intgo _wrap_InputTextCallbackData_Flags_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  intgo _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (ImGuiInputTextFlags) ((arg1)->Flags);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_UserData_set(ImGuiInputTextCallbackData *_swig_go_0, void *_swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->UserData = arg2;

}


void *_wrap_InputTextCallbackData_UserData_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (void *) ((arg1)->UserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_EventChar_set(ImGuiInputTextCallbackData *_swig_go_0, short _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImWchar arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  if (arg1) (arg1)->EventChar = arg2;

}


short _wrap_InputTextCallbackData_EventChar_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImWchar result;
  short _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (ImWchar) ((arg1)->EventChar);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_EventKey_set(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiKey arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (ImGuiKey)_swig_go_1;

  if (arg1) (arg1)->EventKey = arg2;

}


intgo _wrap_InputTextCallbackData_EventKey_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiKey result;
  intgo _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (ImGuiKey) ((arg1)->EventKey);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_Buf_set(ImGuiInputTextCallbackData *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    delete [] arg1->Buf;
    if (arg2) {
      arg1->Buf = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Buf, (const char *)arg2);
    } else {
      arg1->Buf = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_InputTextCallbackData_Buf_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (char *) ((arg1)->Buf);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_BufTextLen_set(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->BufTextLen = arg2;

}


intgo _wrap_InputTextCallbackData_BufTextLen_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->BufTextLen);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_BufSize_set(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->BufSize = arg2;

}


intgo _wrap_InputTextCallbackData_BufSize_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->BufSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_BufDirty_set(ImGuiInputTextCallbackData *_swig_go_0, bool _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->BufDirty = arg2;

}


bool _wrap_InputTextCallbackData_BufDirty_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (bool) ((arg1)->BufDirty);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_CursorPos_set(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->CursorPos = arg2;

}


intgo _wrap_InputTextCallbackData_CursorPos_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->CursorPos);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_SelectionStart_set(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->SelectionStart = arg2;

}


intgo _wrap_InputTextCallbackData_SelectionStart_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->SelectionStart);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_SelectionEnd_set(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->SelectionEnd = arg2;

}


intgo _wrap_InputTextCallbackData_SelectionEnd_get(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->SelectionEnd);
  _swig_go_result = result;
  return _swig_go_result;
}


ImGuiInputTextCallbackData *_wrap_new_InputTextCallbackData() {
  ImGuiInputTextCallbackData *result = 0 ;
  ImGuiInputTextCallbackData *_swig_go_result;


  result = (ImGuiInputTextCallbackData *)new ImGuiInputTextCallbackData();
  *(ImGuiInputTextCallbackData **)&_swig_go_result = (ImGuiInputTextCallbackData *)result;
  return _swig_go_result;
}


void _wrap_InputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;

  (arg1)->DeleteChars(arg2,arg3);

}


void _wrap_InputTextCallbackData_InsertChars__SWIG_0(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';


  (arg1)->InsertChars(arg2,(char const *)arg3,(char const *)arg4);

  free(arg3);
  free(arg4);
}


void _wrap_InputTextCallbackData_InsertChars__SWIG_1(ImGuiInputTextCallbackData *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  (arg1)->InsertChars(arg2,(char const *)arg3);

  free(arg3);
}


bool _wrap_InputTextCallbackData_HasSelection(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  result = (bool)((ImGuiInputTextCallbackData const *)arg1)->HasSelection();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_delete_InputTextCallbackData(ImGuiInputTextCallbackData *_swig_go_0) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;

  arg1 = *(ImGuiInputTextCallbackData **)&_swig_go_0;

  delete arg1;

}


void _wrap_SizeCallbackData_UserData_set(ImGuiSizeCallbackData *_swig_go_0, void *_swig_go_1) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->UserData = arg2;

}


void *_wrap_SizeCallbackData_UserData_get(ImGuiSizeCallbackData *_swig_go_0) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;

  result = (void *) ((arg1)->UserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_SizeCallbackData_Pos_set(ImGuiSizeCallbackData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->Pos = *arg2;

}


ImVec2 *_wrap_SizeCallbackData_Pos_get(ImGuiSizeCallbackData *_swig_go_0) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->Pos);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_SizeCallbackData_CurrentSize_set(ImGuiSizeCallbackData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->CurrentSize = *arg2;

}


ImVec2 *_wrap_SizeCallbackData_CurrentSize_get(ImGuiSizeCallbackData *_swig_go_0) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->CurrentSize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_SizeCallbackData_DesiredSize_set(ImGuiSizeCallbackData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DesiredSize = *arg2;

}


ImVec2 *_wrap_SizeCallbackData_DesiredSize_get(ImGuiSizeCallbackData *_swig_go_0) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DesiredSize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


ImGuiSizeCallbackData *_wrap_new_SizeCallbackData() {
  ImGuiSizeCallbackData *result = 0 ;
  ImGuiSizeCallbackData *_swig_go_result;


  result = (ImGuiSizeCallbackData *)new ImGuiSizeCallbackData();
  *(ImGuiSizeCallbackData **)&_swig_go_result = (ImGuiSizeCallbackData *)result;
  return _swig_go_result;
}


void _wrap_delete_SizeCallbackData(ImGuiSizeCallbackData *_swig_go_0) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;

  arg1 = *(ImGuiSizeCallbackData **)&_swig_go_0;

  delete arg1;

}


void _wrap_Payload_Data_set(ImGuiPayload *_swig_go_0, void *_swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->Data = arg2;

}


void *_wrap_Payload_Data_get(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (void *) ((arg1)->Data);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_Payload_DataSize_set(ImGuiPayload *_swig_go_0, intgo _swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->DataSize = arg2;

}


intgo _wrap_Payload_DataSize_get(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (int) ((arg1)->DataSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Payload_SourceId_set(ImGuiPayload *_swig_go_0, intgo _swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID arg2 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  if (arg1) (arg1)->SourceId = arg2;

}


intgo _wrap_Payload_SourceId_get(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID result;
  intgo _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (ImGuiID) ((arg1)->SourceId);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Payload_SourceParentId_set(ImGuiPayload *_swig_go_0, intgo _swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID arg2 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  if (arg1) (arg1)->SourceParentId = arg2;

}


intgo _wrap_Payload_SourceParentId_get(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID result;
  intgo _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (ImGuiID) ((arg1)->SourceParentId);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Payload_DataFrameCount_set(ImGuiPayload *_swig_go_0, intgo _swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->DataFrameCount = arg2;

}


intgo _wrap_Payload_DataFrameCount_get(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (int) ((arg1)->DataFrameCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Payload_DataType_set(ImGuiPayload *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *arg2 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if(arg2) {
      strncpy((char*)arg1->DataType, (const char *)arg2, 32+1-1);
      arg1->DataType[32+1-1] = 0;
    } else {
      arg1->DataType[0] = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Payload_DataType_get(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (char *)(char *) ((arg1)->DataType);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Payload_Preview_set(ImGuiPayload *_swig_go_0, bool _swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->Preview = arg2;

}


bool _wrap_Payload_Preview_get(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (bool) ((arg1)->Preview);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Payload_Delivery_set(ImGuiPayload *_swig_go_0, bool _swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->Delivery = arg2;

}


bool _wrap_Payload_Delivery_get(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (bool) ((arg1)->Delivery);
  _swig_go_result = result;
  return _swig_go_result;
}


ImGuiPayload *_wrap_new_Payload() {
  ImGuiPayload *result = 0 ;
  ImGuiPayload *_swig_go_result;


  result = (ImGuiPayload *)new ImGuiPayload();
  *(ImGuiPayload **)&_swig_go_result = (ImGuiPayload *)result;
  return _swig_go_result;
}


void _wrap_Payload_Clear(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  (arg1)->Clear();

}


bool _wrap_Payload_IsDataType(ImGuiPayload *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)((ImGuiPayload const *)arg1)->IsDataType((char const *)arg2);
  _swig_go_result = result;
  free(arg2);
  return _swig_go_result;
}


bool _wrap_Payload_IsPreview(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (bool)((ImGuiPayload const *)arg1)->IsPreview();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_Payload_IsDelivery(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  result = (bool)((ImGuiPayload const *)arg1)->IsDelivery();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_delete_Payload(ImGuiPayload *_swig_go_0) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;

  arg1 = *(ImGuiPayload **)&_swig_go_0;

  delete arg1;

}


void _wrap_ListClipper_StartPosY_set(ImGuiListClipper *_swig_go_0, float _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->StartPosY = arg2;

}


float _wrap_ListClipper_StartPosY_get(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (float) ((arg1)->StartPosY);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ListClipper_ItemsHeight_set(ImGuiListClipper *_swig_go_0, float _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ItemsHeight = arg2;

}


float _wrap_ListClipper_ItemsHeight_get(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (float) ((arg1)->ItemsHeight);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ListClipper_ItemsCount_set(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->ItemsCount = arg2;

}


intgo _wrap_ListClipper_ItemsCount_get(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (int) ((arg1)->ItemsCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ListClipper_StepNo_set(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->StepNo = arg2;

}


intgo _wrap_ListClipper_StepNo_get(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (int) ((arg1)->StepNo);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ListClipper_DisplayStart_set(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->DisplayStart = arg2;

}


intgo _wrap_ListClipper_DisplayStart_get(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (int) ((arg1)->DisplayStart);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ListClipper_DisplayEnd_set(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->DisplayEnd = arg2;

}


intgo _wrap_ListClipper_DisplayEnd_get(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (int) ((arg1)->DisplayEnd);
  _swig_go_result = result;
  return _swig_go_result;
}


ImGuiListClipper *_wrap_new_ListClipper__SWIG_0(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;
  ImGuiListClipper *result = 0 ;
  ImGuiListClipper *_swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = (ImGuiListClipper *)new ImGuiListClipper(arg1,arg2);
  *(ImGuiListClipper **)&_swig_go_result = (ImGuiListClipper *)result;
  return _swig_go_result;
}


ImGuiListClipper *_wrap_new_ListClipper__SWIG_1(intgo _swig_go_0) {
  int arg1 ;
  ImGuiListClipper *result = 0 ;
  ImGuiListClipper *_swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (ImGuiListClipper *)new ImGuiListClipper(arg1);
  *(ImGuiListClipper **)&_swig_go_result = (ImGuiListClipper *)result;
  return _swig_go_result;
}


ImGuiListClipper *_wrap_new_ListClipper__SWIG_2() {
  ImGuiListClipper *result = 0 ;
  ImGuiListClipper *_swig_go_result;


  result = (ImGuiListClipper *)new ImGuiListClipper();
  *(ImGuiListClipper **)&_swig_go_result = (ImGuiListClipper *)result;
  return _swig_go_result;
}


void _wrap_delete_ListClipper(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  delete arg1;

}


bool _wrap_ListClipper_Step(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (bool)(arg1)->Step();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ListClipper_Begin__SWIG_0(ImGuiListClipper *_swig_go_0, intgo _swig_go_1, float _swig_go_2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  float arg3 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (float)_swig_go_2;

  (arg1)->Begin(arg2,arg3);

}


void _wrap_ListClipper_Begin__SWIG_1(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->Begin(arg2);

}


void _wrap_ListClipper_End(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  (arg1)->End();

}


void _wrap_Color_Value_set(ImColor *_swig_go_0, ImVec4 *_swig_go_1) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;

  arg1 = *(ImColor **)&_swig_go_0;
  arg2 = *(ImVec4 **)&_swig_go_1;

  if (arg1) (arg1)->Value = *arg2;

}


ImVec4 *_wrap_Color_Value_get(ImColor *_swig_go_0) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;

  arg1 = *(ImColor **)&_swig_go_0;

  result = (ImVec4 *)& ((arg1)->Value);
  *(ImVec4 **)&_swig_go_result = (ImVec4 *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_Color__SWIG_0() {
  ImColor *result = 0 ;
  ImColor *_swig_go_result;


  result = (ImColor *)new ImColor();
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_Color__SWIG_1(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_Color__SWIG_2(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (ImColor *)new ImColor(arg1,arg2,arg3);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_Color__SWIG_3(intgo _swig_go_0) {
  ImU32 arg1 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (ImU32)_swig_go_0;

  result = (ImColor *)new ImColor(arg1);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_Color__SWIG_4(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_Color__SWIG_5(float _swig_go_0, float _swig_go_1, float _swig_go_2) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (ImColor *)new ImColor(arg1,arg2,arg3);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_Color__SWIG_6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = 0 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (ImColor *)new ImColor((ImVec4 const &)*arg1);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


intgo _wrap_Color_U32(ImColor *_swig_go_0) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = *(ImColor **)&_swig_go_0;

  result = (ImU32)((ImColor const *)arg1)->operator ImU32();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec4 *_wrap_Color_Vec4(ImColor *_swig_go_0) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 result;
  ImVec4 *_swig_go_result;

  arg1 = *(ImColor **)&_swig_go_0;

  result = ((ImColor const *)arg1)->operator ImVec4();
  *(ImVec4 **)&_swig_go_result = new ImVec4(result);
  return _swig_go_result;
}


void _wrap_Color_SetHSV__SWIG_0(ImColor *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;

  arg1 = *(ImColor **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->SetHSV(arg2,arg3,arg4,arg5);

}


void _wrap_Color_SetHSV__SWIG_1(ImColor *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;

  arg1 = *(ImColor **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  (arg1)->SetHSV(arg2,arg3,arg4);

}


ImColor *_wrap_Color_HSV__SWIG_0(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor result;
  ImColor *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = ImColor::HSV(arg1,arg2,arg3,arg4);
  *(ImColor **)&_swig_go_result = new ImColor(result);
  return _swig_go_result;
}


ImColor *_wrap_Color_HSV__SWIG_1(float _swig_go_0, float _swig_go_1, float _swig_go_2) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ImColor result;
  ImColor *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = ImColor::HSV(arg1,arg2,arg3);
  *(ImColor **)&_swig_go_result = new ImColor(result);
  return _swig_go_result;
}


void _wrap_delete_Color(ImColor *_swig_go_0) {
  ImColor *arg1 = (ImColor *) 0 ;

  arg1 = *(ImColor **)&_swig_go_0;

  delete arg1;

}


void _wrap_DrawCmd_ElemCount_set(ImDrawCmd *_swig_go_0, intgo _swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = (unsigned int)_swig_go_1;

  if (arg1) (arg1)->ElemCount = arg2;

}


intgo _wrap_DrawCmd_ElemCount_get(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (unsigned int) ((arg1)->ElemCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawCmd_ClipRect_set(ImDrawCmd *_swig_go_0, ImVec4 *_swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = *(ImVec4 **)&_swig_go_1;

  if (arg1) (arg1)->ClipRect = *arg2;

}


ImVec4 *_wrap_DrawCmd_ClipRect_get(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (ImVec4 *)& ((arg1)->ClipRect);
  *(ImVec4 **)&_swig_go_result = (ImVec4 *)result;
  return _swig_go_result;
}


void _wrap_DrawCmd_TextureId_set(ImDrawCmd *_swig_go_0, ImTextureID _swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;

  if (arg1) (arg1)->TextureId = arg2;

}


ImTextureID _wrap_DrawCmd_TextureId_get(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID result;
  ImTextureID _swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (ImTextureID) ((arg1)->TextureId);
  *(ImTextureID *)&_swig_go_result = (ImTextureID)result;
  return _swig_go_result;
}


void _wrap_DrawCmd_UserCallback_set(ImDrawCmd *_swig_go_0, void* _swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = *(ImDrawCallback *)&_swig_go_1;

  if (arg1) (arg1)->UserCallback = arg2;

}


void* _wrap_DrawCmd_UserCallback_get(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback result;
  void* _swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (ImDrawCallback) ((arg1)->UserCallback);
  *(ImDrawCallback *)&_swig_go_result = (ImDrawCallback)result;
  return _swig_go_result;
}


void _wrap_DrawCmd_UserCallbackData_set(ImDrawCmd *_swig_go_0, void *_swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->UserCallbackData = arg2;

}


void *_wrap_DrawCmd_UserCallbackData_get(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (void *) ((arg1)->UserCallbackData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


ImDrawCmd *_wrap_new_DrawCmd() {
  ImDrawCmd *result = 0 ;
  ImDrawCmd *_swig_go_result;


  result = (ImDrawCmd *)new ImDrawCmd();
  *(ImDrawCmd **)&_swig_go_result = (ImDrawCmd *)result;
  return _swig_go_result;
}


void _wrap_delete_DrawCmd(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  delete arg1;

}


void _wrap_DrawCmdUserCall(ImDrawList *_swig_go_0, ImDrawCmd *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCmd *arg2 = (ImDrawCmd *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImDrawCmd **)&_swig_go_1;

  ImDrawCmdUserCall((ImDrawList const *)arg1,(ImDrawCmd const *)arg2);

}


intgo _wrap_DrawIdxSize_get() {
  int result;
  intgo _swig_go_result;


  result = (int)(int)ImDrawIdxSize;
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawVert_pos_set(ImDrawVert *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImDrawVert **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->pos = *arg2;

}


ImVec2 *_wrap_DrawVert_pos_get(ImDrawVert *_swig_go_0) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawVert **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->pos);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_DrawVert_uv_set(ImDrawVert *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImDrawVert **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->uv = *arg2;

}


ImVec2 *_wrap_DrawVert_uv_get(ImDrawVert *_swig_go_0) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawVert **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->uv);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_DrawVert_col_set(ImDrawVert *_swig_go_0, intgo _swig_go_1) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 arg2 ;

  arg1 = *(ImDrawVert **)&_swig_go_0;
  arg2 = (ImU32)_swig_go_1;

  if (arg1) (arg1)->col = arg2;

}


intgo _wrap_DrawVert_col_get(ImDrawVert *_swig_go_0) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = *(ImDrawVert **)&_swig_go_0;

  result = (ImU32) ((arg1)->col);
  _swig_go_result = result;
  return _swig_go_result;
}


ImDrawVert *_wrap_new_DrawVert() {
  ImDrawVert *result = 0 ;
  ImDrawVert *_swig_go_result;


  result = (ImDrawVert *)new ImDrawVert();
  *(ImDrawVert **)&_swig_go_result = (ImDrawVert *)result;
  return _swig_go_result;
}


void _wrap_delete_DrawVert(ImDrawVert *_swig_go_0) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;

  arg1 = *(ImDrawVert **)&_swig_go_0;

  delete arg1;

}


intgo _wrap_DrawVertSize_get() {
  int result;
  intgo _swig_go_result;


  result = (int)(int)ImDrawVertSize;
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawVertOffset(intgo *_swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;

  arg1 = *(int **)&_swig_go_0;
  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;

  ImDrawVertOffset(arg1,arg2,arg3);

}


void _wrap_DrawChannel_CmdBuffer_set(ImDrawChannel *_swig_go_0, ImVector< ImDrawCmd > *_swig_go_1) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ;

  arg1 = *(ImDrawChannel **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawCmd > **)&_swig_go_1;

  if (arg1) (arg1)->CmdBuffer = *arg2;

}


ImVector< ImDrawCmd > *_wrap_DrawChannel_CmdBuffer_get(ImDrawChannel *_swig_go_0) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawCmd > *result = 0 ;
  ImVector< ImDrawCmd > *_swig_go_result;

  arg1 = *(ImDrawChannel **)&_swig_go_0;

  result = (ImVector< ImDrawCmd > *)& ((arg1)->CmdBuffer);
  *(ImVector< ImDrawCmd > **)&_swig_go_result = (ImVector< ImDrawCmd > *)result;
  return _swig_go_result;
}


void _wrap_DrawChannel_IdxBuffer_set(ImDrawChannel *_swig_go_0, ImVector< unsigned short > *_swig_go_1) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawIdx > *arg2 = (ImVector< ImDrawIdx > *) 0 ;

  arg1 = *(ImDrawChannel **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawIdx > **)&_swig_go_1;

  if (arg1) (arg1)->IdxBuffer = *arg2;

}


ImVector< unsigned short > *_wrap_DrawChannel_IdxBuffer_get(ImDrawChannel *_swig_go_0) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawIdx > *result = 0 ;
  ImVector< unsigned short > *_swig_go_result;

  arg1 = *(ImDrawChannel **)&_swig_go_0;

  result = (ImVector< ImDrawIdx > *)& ((arg1)->IdxBuffer);
  *(ImVector< ImDrawIdx > **)&_swig_go_result = (ImVector< ImDrawIdx > *)result;
  return _swig_go_result;
}


ImDrawChannel *_wrap_new_DrawChannel() {
  ImDrawChannel *result = 0 ;
  ImDrawChannel *_swig_go_result;


  result = (ImDrawChannel *)new ImDrawChannel();
  *(ImDrawChannel **)&_swig_go_result = (ImDrawChannel *)result;
  return _swig_go_result;
}


void _wrap_delete_DrawChannel(ImDrawChannel *_swig_go_0) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;

  arg1 = *(ImDrawChannel **)&_swig_go_0;

  delete arg1;

}


intgo _wrap_DrawCornerFlags_TopLeft() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_TopLeft;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawCornerFlags_TopRight() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_TopRight;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawCornerFlags_BotLeft() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_BotLeft;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawCornerFlags_BotRight() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_BotRight;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawCornerFlags_Top() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_Top;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawCornerFlags_Bot() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_Bot;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawCornerFlags_Left() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_Left;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawCornerFlags_Right() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_Right;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawCornerFlags_All() {
  ImDrawCornerFlags_ result;
  intgo _swig_go_result;


  result = ImDrawCornerFlags_All;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawListFlags_None() {
  ImDrawListFlags_ result;
  intgo _swig_go_result;


  result = ImDrawListFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawListFlags_AntiAliasedLines() {
  ImDrawListFlags_ result;
  intgo _swig_go_result;


  result = ImDrawListFlags_AntiAliasedLines;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_DrawListFlags_AntiAliasedFill() {
  ImDrawListFlags_ result;
  intgo _swig_go_result;


  result = ImDrawListFlags_AntiAliasedFill;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_DrawList_CmdBuffer_set(ImDrawList *_swig_go_0, ImVector< ImDrawCmd > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawCmd > **)&_swig_go_1;

  if (arg1) (arg1)->CmdBuffer = *arg2;

}


ImVector< ImDrawCmd > *_wrap_DrawList_CmdBuffer_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawCmd > *result = 0 ;
  ImVector< ImDrawCmd > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImDrawCmd > *)& ((arg1)->CmdBuffer);
  *(ImVector< ImDrawCmd > **)&_swig_go_result = (ImVector< ImDrawCmd > *)result;
  return _swig_go_result;
}


void _wrap_DrawList_IdxBuffer_set(ImDrawList *_swig_go_0, ImVector< unsigned short > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawIdx > *arg2 = (ImVector< ImDrawIdx > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawIdx > **)&_swig_go_1;

  if (arg1) (arg1)->IdxBuffer = *arg2;

}


ImVector< unsigned short > *_wrap_DrawList_IdxBuffer_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawIdx > *result = 0 ;
  ImVector< unsigned short > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImDrawIdx > *)& ((arg1)->IdxBuffer);
  *(ImVector< ImDrawIdx > **)&_swig_go_result = (ImVector< ImDrawIdx > *)result;
  return _swig_go_result;
}


void _wrap_DrawList_VtxBuffer_set(ImDrawList *_swig_go_0, ImVector< ImDrawVert > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawVert > *arg2 = (ImVector< ImDrawVert > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawVert > **)&_swig_go_1;

  if (arg1) (arg1)->VtxBuffer = *arg2;

}


ImVector< ImDrawVert > *_wrap_DrawList_VtxBuffer_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawVert > *result = 0 ;
  ImVector< ImDrawVert > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImDrawVert > *)& ((arg1)->VtxBuffer);
  *(ImVector< ImDrawVert > **)&_swig_go_result = (ImVector< ImDrawVert > *)result;
  return _swig_go_result;
}


void _wrap_DrawList_Flags_set(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListFlags arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (ImDrawListFlags)_swig_go_1;

  if (arg1) (arg1)->Flags = arg2;

}


intgo _wrap_DrawList_Flags_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListFlags result;
  intgo _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImDrawListFlags) ((arg1)->Flags);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawList__Data_set(ImDrawList *_swig_go_0, ImDrawListSharedData *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSharedData *arg2 = (ImDrawListSharedData *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImDrawListSharedData **)&_swig_go_1;

  if (arg1) (arg1)->_Data = (ImDrawListSharedData const *)arg2;

}


ImDrawListSharedData *_wrap_DrawList__Data_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSharedData *result = 0 ;
  ImDrawListSharedData *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImDrawListSharedData *) ((arg1)->_Data);
  *(ImDrawListSharedData **)&_swig_go_result = (ImDrawListSharedData *)result;
  return _swig_go_result;
}


void _wrap_DrawList__OwnerName_set(ImDrawList *_swig_go_0, _gostring_ _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_OwnerName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_OwnerName, (const char *)arg2);
    } else {
      arg1->_OwnerName = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_DrawList__OwnerName_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (char *) ((arg1)->_OwnerName);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_DrawList__VtxCurrentIdx_set(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (unsigned int)_swig_go_1;

  if (arg1) (arg1)->_VtxCurrentIdx = arg2;

}


intgo _wrap_DrawList__VtxCurrentIdx_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (unsigned int) ((arg1)->_VtxCurrentIdx);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawList__VtxWritePtr_set(ImDrawList *_swig_go_0, ImDrawVert *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *arg2 = (ImDrawVert *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImDrawVert **)&_swig_go_1;

  if (arg1) (arg1)->_VtxWritePtr = arg2;

}


ImDrawVert *_wrap_DrawList__VtxWritePtr_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *result = 0 ;
  ImDrawVert *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImDrawVert *) ((arg1)->_VtxWritePtr);
  *(ImDrawVert **)&_swig_go_result = (ImDrawVert *)result;
  return _swig_go_result;
}


void _wrap_DrawList__IdxWritePtr_set(ImDrawList *_swig_go_0, short *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *arg2 = (ImDrawIdx *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImDrawIdx **)&_swig_go_1;

  if (arg1) (arg1)->_IdxWritePtr = arg2;

}


short *_wrap_DrawList__IdxWritePtr_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImDrawIdx *) ((arg1)->_IdxWritePtr);
  *(ImDrawIdx **)&_swig_go_result = (ImDrawIdx *)result;
  return _swig_go_result;
}


void _wrap_DrawList__ClipRectStack_set(ImDrawList *_swig_go_0, ImVector< ImVec4 > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec4 > *arg2 = (ImVector< ImVec4 > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImVec4 > **)&_swig_go_1;

  if (arg1) (arg1)->_ClipRectStack = *arg2;

}


ImVector< ImVec4 > *_wrap_DrawList__ClipRectStack_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec4 > *result = 0 ;
  ImVector< ImVec4 > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImVec4 > *)& ((arg1)->_ClipRectStack);
  *(ImVector< ImVec4 > **)&_swig_go_result = (ImVector< ImVec4 > *)result;
  return _swig_go_result;
}


void _wrap_DrawList__TextureIdStack_set(ImDrawList *_swig_go_0, ImVector< void * > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImTextureID > *arg2 = (ImVector< ImTextureID > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImTextureID > **)&_swig_go_1;

  if (arg1) (arg1)->_TextureIdStack = *arg2;

}


ImVector< void * > *_wrap_DrawList__TextureIdStack_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImTextureID > *result = 0 ;
  ImVector< void * > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImTextureID > *)& ((arg1)->_TextureIdStack);
  *(ImVector< ImTextureID > **)&_swig_go_result = (ImVector< ImTextureID > *)result;
  return _swig_go_result;
}


void _wrap_DrawList__Path_set(ImDrawList *_swig_go_0, ImVector< ImVec2 > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec2 > *arg2 = (ImVector< ImVec2 > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImVec2 > **)&_swig_go_1;

  if (arg1) (arg1)->_Path = *arg2;

}


ImVector< ImVec2 > *_wrap_DrawList__Path_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec2 > *result = 0 ;
  ImVector< ImVec2 > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImVec2 > *)& ((arg1)->_Path);
  *(ImVector< ImVec2 > **)&_swig_go_result = (ImVector< ImVec2 > *)result;
  return _swig_go_result;
}


void _wrap_DrawList__ChannelsCurrent_set(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_ChannelsCurrent = arg2;

}


intgo _wrap_DrawList__ChannelsCurrent_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (int) ((arg1)->_ChannelsCurrent);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawList__ChannelsCount_set(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_ChannelsCount = arg2;

}


intgo _wrap_DrawList__ChannelsCount_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (int) ((arg1)->_ChannelsCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawList__Channels_set(ImDrawList *_swig_go_0, ImVector< ImDrawChannel > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawChannel > *arg2 = (ImVector< ImDrawChannel > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawChannel > **)&_swig_go_1;

  if (arg1) (arg1)->_Channels = *arg2;

}


ImVector< ImDrawChannel > *_wrap_DrawList__Channels_get(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawChannel > *result = 0 ;
  ImVector< ImDrawChannel > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImDrawChannel > *)& ((arg1)->_Channels);
  *(ImVector< ImDrawChannel > **)&_swig_go_result = (ImVector< ImDrawChannel > *)result;
  return _swig_go_result;
}


ImDrawList *_wrap_new_DrawList(ImDrawListSharedData *_swig_go_0) {
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImDrawList *result = 0 ;
  ImDrawList *_swig_go_result;

  arg1 = *(ImDrawListSharedData **)&_swig_go_0;

  result = (ImDrawList *)new ImDrawList((ImDrawListSharedData const *)arg1);
  *(ImDrawList **)&_swig_go_result = (ImDrawList *)result;
  return _swig_go_result;
}


void _wrap_delete_DrawList(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  delete arg1;

}


void _wrap_DrawList_PushClipRect__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, bool _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  bool arg4 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  argp2 = (ImVec2 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg2 = (ImVec2)*argp2;


  argp3 = (ImVec2 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg3 = (ImVec2)*argp3;

  arg4 = (bool)_swig_go_3;

  (arg1)->PushClipRect(arg2,arg3,arg4);

}


void _wrap_DrawList_PushClipRect__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  argp2 = (ImVec2 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg2 = (ImVec2)*argp2;


  argp3 = (ImVec2 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg3 = (ImVec2)*argp3;


  (arg1)->PushClipRect(arg2,arg3);

}


void _wrap_DrawList_PushClipRectFullScreen(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->PushClipRectFullScreen();

}


void _wrap_DrawList_PopClipRect(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->PopClipRect();

}


void _wrap_DrawList_PushTextureID(ImDrawList *_swig_go_0, ImTextureID _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;

  (arg1)->PushTextureID(arg2);

}


void _wrap_DrawList_PopTextureID(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->PopTextureID();

}


ImVec2 *_wrap_DrawList_GetClipRectMin(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = ((ImDrawList const *)arg1)->GetClipRectMin();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_DrawList_GetClipRectMax(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = ((ImDrawList const *)arg1)->GetClipRectMax();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


void _wrap_DrawList_AddLine__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);

}


void _wrap_DrawList_AddLine__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_DrawList_AddRect__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4, intgo _swig_go_5, float _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  int arg6 ;
  float arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (int)_swig_go_5;
  arg7 = (float)_swig_go_6;

  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7);

}


void _wrap_DrawList_AddRect__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  int arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (int)_swig_go_5;

  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6);

}


void _wrap_DrawList_AddRect__SWIG_2(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);

}


void _wrap_DrawList_AddRect__SWIG_3(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_DrawList_AddRectFilled__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  int arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (int)_swig_go_5;

  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6);

}


void _wrap_DrawList_AddRectFilled__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);

}


void _wrap_DrawList_AddRectFilled__SWIG_2(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_DrawList_AddRectFilledMultiColor(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  ImU32 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (ImU32)_swig_go_4;
  arg6 = (ImU32)_swig_go_5;
  arg7 = (ImU32)_swig_go_6;

  (arg1)->AddRectFilledMultiColor((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7);

}


void _wrap_DrawList_AddQuad__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5, float _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;
  arg7 = (float)_swig_go_6;

  (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);

}


void _wrap_DrawList_AddQuad__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;

  (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);

}


void _wrap_DrawList_AddQuadFilled(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;

  (arg1)->AddQuadFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);

}


void _wrap_DrawList_AddTriangle__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, float _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  float arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;
  arg6 = (float)_swig_go_5;

  (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,arg6);

}


void _wrap_DrawList_AddTriangle__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);

}


void _wrap_DrawList_AddTriangleFilled(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  (arg1)->AddTriangleFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);

}


void _wrap_DrawList_AddCircle__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, float _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  float arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (float)_swig_go_5;

  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);

}


void _wrap_DrawList_AddCircle__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5);

}


void _wrap_DrawList_AddCircle__SWIG_2(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4);

}


void _wrap_DrawList_AddCircleFilled__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4,arg5);

}


void _wrap_DrawList_AddCircleFilled__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4);

}


void _wrap_DrawList_AddText__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImU32)_swig_go_2;

  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';


  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4,(char const *)arg5);

  free(arg4);
  free(arg5);
}


void _wrap_DrawList_AddText__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImU32)_swig_go_2;

  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';


  (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4);

  free(arg4);
}


void _wrap_DrawList_AddText__SWIG_2(ImDrawList *_swig_go_0, ImFont *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6, float _swig_go_7, ImVec4 *_swig_go_8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  ImVec4 *arg9 = (ImVec4 *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';

  arg8 = (float)_swig_go_7;
  arg9 = *(ImVec4 **)&_swig_go_8;

  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8,(ImVec4 const *)arg9);

  free(arg6);
  free(arg7);
}


void _wrap_DrawList_AddText__SWIG_3(ImDrawList *_swig_go_0, ImFont *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6, float _swig_go_7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';

  arg8 = (float)_swig_go_7;

  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8);

  free(arg6);
  free(arg7);
}


void _wrap_DrawList_AddText__SWIG_4(ImDrawList *_swig_go_0, ImFont *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7);

  free(arg6);
  free(arg7);
}


void _wrap_DrawList_AddText__SWIG_5(ImDrawList *_swig_go_0, ImFont *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6);

  free(arg6);
}


void _wrap_DrawList_AddImage__SWIG_0(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, intgo _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = (ImU32)_swig_go_6;

  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7);

}


void _wrap_DrawList_AddImage__SWIG_1(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;

  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6);

}


void _wrap_DrawList_AddImage__SWIG_2(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;

  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5);

}


void _wrap_DrawList_AddImage__SWIG_3(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);

}


void _wrap_DrawList_AddImageQuad__SWIG_0(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7, ImVec2 *_swig_go_8, ImVec2 *_swig_go_9, intgo _swig_go_10) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImVec2 *arg10 = 0 ;
  ImU32 arg11 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;
  arg9 = *(ImVec2 **)&_swig_go_8;
  arg10 = *(ImVec2 **)&_swig_go_9;
  arg11 = (ImU32)_swig_go_10;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10,arg11);

}


void _wrap_DrawList_AddImageQuad__SWIG_1(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7, ImVec2 *_swig_go_8, ImVec2 *_swig_go_9) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImVec2 *arg10 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;
  arg9 = *(ImVec2 **)&_swig_go_8;
  arg10 = *(ImVec2 **)&_swig_go_9;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10);

}


void _wrap_DrawList_AddImageQuad__SWIG_2(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7, ImVec2 *_swig_go_8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;
  arg9 = *(ImVec2 **)&_swig_go_8;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9);

}


void _wrap_DrawList_AddImageQuad__SWIG_3(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8);

}


void _wrap_DrawList_AddImageQuad__SWIG_4(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7);

}


void _wrap_DrawList_AddImageQuad__SWIG_5(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6);

}


void _wrap_DrawList_AddImageRounded__SWIG_0(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, intgo _swig_go_6, float _swig_go_7, intgo _swig_go_8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;
  float arg8 ;
  int arg9 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = (ImU32)_swig_go_6;
  arg8 = (float)_swig_go_7;
  arg9 = (int)_swig_go_8;

  (arg1)->AddImageRounded(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7,arg8,arg9);

}


void _wrap_DrawList_AddImageRounded__SWIG_1(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, intgo _swig_go_6, float _swig_go_7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;
  float arg8 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = (ImU32)_swig_go_6;
  arg8 = (float)_swig_go_7;

  (arg1)->AddImageRounded(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7,arg8);

}


void _wrap_DrawList_AddPolyline(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4, float _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  bool arg5 ;
  float arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (bool)_swig_go_4;
  arg6 = (float)_swig_go_5;

  (arg1)->AddPolyline((ImVec2 const *)arg2,arg3,arg4,arg5,arg6);

}


void _wrap_DrawList_AddConvexPolyFilled(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddConvexPolyFilled((ImVec2 const *)arg2,arg3,arg4);

}


void _wrap_DrawList_AddBezierCurve__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5, float _swig_go_6, intgo _swig_go_7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;
  int arg8 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;
  arg7 = (float)_swig_go_6;
  arg8 = (int)_swig_go_7;

  (arg1)->AddBezierCurve((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7,arg8);

}


void _wrap_DrawList_AddBezierCurve__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5, float _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;
  arg7 = (float)_swig_go_6;

  (arg1)->AddBezierCurve((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);

}


void _wrap_DrawList_PathClear(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->PathClear();

}


void _wrap_DrawList_PathLineTo(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  (arg1)->PathLineTo((ImVec2 const &)*arg2);

}


void _wrap_DrawList_PathLineToMergeDuplicate(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  (arg1)->PathLineToMergeDuplicate((ImVec2 const &)*arg2);

}


void _wrap_DrawList_PathFillConvex(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (ImU32)_swig_go_1;

  (arg1)->PathFillConvex(arg2);

}


void _wrap_DrawList_PathStroke__SWIG_0(ImDrawList *_swig_go_0, intgo _swig_go_1, bool _swig_go_2, float _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  bool arg3 ;
  float arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (ImU32)_swig_go_1;
  arg3 = (bool)_swig_go_2;
  arg4 = (float)_swig_go_3;

  (arg1)->PathStroke(arg2,arg3,arg4);

}


void _wrap_DrawList_PathStroke__SWIG_1(ImDrawList *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  bool arg3 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (ImU32)_swig_go_1;
  arg3 = (bool)_swig_go_2;

  (arg1)->PathStroke(arg2,arg3);

}


void _wrap_DrawList_PathArcTo__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (int)_swig_go_5;

  (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);

}


void _wrap_DrawList_PathArcTo__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5);

}


void _wrap_DrawList_PathArcToFast(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->PathArcToFast((ImVec2 const &)*arg2,arg3,arg4,arg5);

}


void _wrap_DrawList_PathBezierCurveTo__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->PathBezierCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);

}


void _wrap_DrawList_PathBezierCurveTo__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  (arg1)->PathBezierCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);

}


void _wrap_DrawList_PathRect__SWIG_0(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, float _swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);

}


void _wrap_DrawList_PathRect__SWIG_1(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, float _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (float)_swig_go_3;

  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_DrawList_PathRect__SWIG_2(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;

  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3);

}


void _wrap_DrawList_ChannelsSplit(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->ChannelsSplit(arg2);

}


void _wrap_DrawList_ChannelsMerge(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->ChannelsMerge();

}


void _wrap_DrawList_ChannelsSetCurrent(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->ChannelsSetCurrent(arg2);

}


void _wrap_DrawList_AddCallback(ImDrawList *_swig_go_0, void* _swig_go_1, void *_swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;
  void *arg3 = (void *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImDrawCallback *)&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;

  (arg1)->AddCallback(arg2,arg3);

}


void _wrap_DrawList_AddDrawCmd(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->AddDrawCmd();

}


ImDrawList *_wrap_DrawList_CloneOutput(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawList *result = 0 ;
  ImDrawList *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImDrawList *)((ImDrawList const *)arg1)->CloneOutput();
  *(ImDrawList **)&_swig_go_result = (ImDrawList *)result;
  return _swig_go_result;
}


long long _wrap_DrawList_CommandsSize(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  size_t result;
  long long _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (arg1)->CommandsSize();
  _swig_go_result = result;
  return _swig_go_result;
}


ImDrawCmd *_wrap_DrawList_CommandsAt(ImDrawList *_swig_go_0, long long _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  size_t arg2 ;
  ImDrawCmd *result = 0 ;
  ImDrawCmd *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (size_t)_swig_go_1;

  result = (ImDrawCmd *)(arg1)->CommandsAt(arg2);
  *(ImDrawCmd **)&_swig_go_result = (ImDrawCmd *)result;
  return _swig_go_result;
}


long long _wrap_DrawList_VtxBufferSize(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  size_t result;
  long long _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (arg1)->VtxBufferSize();
  _swig_go_result = result;
  return _swig_go_result;
}


ImDrawVert *_wrap_DrawList_VtxBufferAt(ImDrawList *_swig_go_0, long long _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  size_t arg2 ;
  ImDrawVert *result = 0 ;
  ImDrawVert *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (size_t)_swig_go_1;

  result = (ImDrawVert *)(arg1)->VtxBufferAt(arg2);
  *(ImDrawVert **)&_swig_go_result = (ImDrawVert *)result;
  return _swig_go_result;
}


long long _wrap_DrawList_IdxBufferSize(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  size_t result;
  long long _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (arg1)->IdxBufferSize();
  _swig_go_result = result;
  return _swig_go_result;
}


short *_wrap_DrawList_IdxBufferAt(ImDrawList *_swig_go_0, long long _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  size_t arg2 ;
  ImDrawIdx *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (size_t)_swig_go_1;

  result = (ImDrawIdx *)(arg1)->IdxBufferAt(arg2);
  *(ImDrawIdx **)&_swig_go_result = (ImDrawIdx *)result;
  return _swig_go_result;
}


void _wrap_DrawData_Valid_set(ImDrawData *_swig_go_0, bool _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool arg2 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->Valid = arg2;

}


bool _wrap_DrawData_Valid_get(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (bool) ((arg1)->Valid);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawData_CmdLists_set(ImDrawData *_swig_go_0, _goslice_ _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList **arg2 = (ImDrawList **) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;

  arg2 = (ImDrawList **)_swig_go_1.array;
  if (arg1) arg1->CmdListsCount = _swig_go_1.len;


  if (arg1) (arg1)->CmdLists = arg2;

}


_goslice_ _wrap_DrawData_CmdLists_get(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList **result = 0 ;
  _goslice_ _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (ImDrawList **) ((arg1)->CmdLists);
  _swig_go_result.array = result; _swig_go_result.len = arg1->CmdListsCount; _swig_go_result.cap = arg1->CmdListsCount;
  return _swig_go_result;
}


void _wrap_DrawData_CmdListsCount_set(ImDrawData *_swig_go_0, intgo _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->CmdListsCount = arg2;

}


intgo _wrap_DrawData_CmdListsCount_get(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (int) ((arg1)->CmdListsCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawData_TotalIdxCount_set(ImDrawData *_swig_go_0, intgo _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TotalIdxCount = arg2;

}


intgo _wrap_DrawData_TotalIdxCount_get(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (int) ((arg1)->TotalIdxCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawData_TotalVtxCount_set(ImDrawData *_swig_go_0, intgo _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TotalVtxCount = arg2;

}


intgo _wrap_DrawData_TotalVtxCount_get(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (int) ((arg1)->TotalVtxCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_DrawData_DisplayPos_set(ImDrawData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplayPos = *arg2;

}


ImVec2 *_wrap_DrawData_DisplayPos_get(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplayPos);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_DrawData_DisplaySize_set(ImDrawData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplaySize = *arg2;

}


ImVec2 *_wrap_DrawData_DisplaySize_get(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplaySize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_DrawData_FramebufferScale_set(ImDrawData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->FramebufferScale = *arg2;

}


ImVec2 *_wrap_DrawData_FramebufferScale_get(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->FramebufferScale);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


ImDrawData *_wrap_new_DrawData() {
  ImDrawData *result = 0 ;
  ImDrawData *_swig_go_result;


  result = (ImDrawData *)new ImDrawData();
  *(ImDrawData **)&_swig_go_result = (ImDrawData *)result;
  return _swig_go_result;
}


void _wrap_delete_DrawData(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;

  delete arg1;

}


void _wrap_DrawData_Clear(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;

  (arg1)->Clear();

}


void _wrap_DrawData_DeIndexAllBuffers(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;

  (arg1)->DeIndexAllBuffers();

}


void _wrap_DrawData_ScaleClipRects(ImDrawData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  (arg1)->ScaleClipRects((ImVec2 const &)*arg2);

}


void _wrap_FontConfig_FontData_set(ImFontConfig *_swig_go_0, void *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->FontData = arg2;

}


void *_wrap_FontConfig_FontData_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (void *) ((arg1)->FontData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_FontConfig_FontDataSize_set(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->FontDataSize = arg2;

}


intgo _wrap_FontConfig_FontDataSize_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (int) ((arg1)->FontDataSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_FontDataOwnedByAtlas_set(ImFontConfig *_swig_go_0, bool _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->FontDataOwnedByAtlas = arg2;

}


bool _wrap_FontConfig_FontDataOwnedByAtlas_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (bool) ((arg1)->FontDataOwnedByAtlas);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_FontNo_set(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->FontNo = arg2;

}


intgo _wrap_FontConfig_FontNo_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (int) ((arg1)->FontNo);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_SizePixels_set(ImFontConfig *_swig_go_0, float _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->SizePixels = arg2;

}


float _wrap_FontConfig_SizePixels_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (float) ((arg1)->SizePixels);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_OversampleH_set(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->OversampleH = arg2;

}


intgo _wrap_FontConfig_OversampleH_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (int) ((arg1)->OversampleH);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_OversampleV_set(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->OversampleV = arg2;

}


intgo _wrap_FontConfig_OversampleV_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (int) ((arg1)->OversampleV);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_PixelSnapH_set(ImFontConfig *_swig_go_0, bool _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->PixelSnapH = arg2;

}


bool _wrap_FontConfig_PixelSnapH_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (bool) ((arg1)->PixelSnapH);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_GlyphExtraSpacing_set(ImFontConfig *_swig_go_0, ImVec2 *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->GlyphExtraSpacing = *arg2;

}


ImVec2 *_wrap_FontConfig_GlyphExtraSpacing_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->GlyphExtraSpacing);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_FontConfig_GlyphOffset_set(ImFontConfig *_swig_go_0, ImVec2 *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->GlyphOffset = *arg2;

}


ImVec2 *_wrap_FontConfig_GlyphOffset_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->GlyphOffset);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_FontConfig_GlyphRanges_set(ImFontConfig *_swig_go_0, short *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(ImWchar **)&_swig_go_1;

  if (arg1) (arg1)->GlyphRanges = (ImWchar const *)arg2;

}


short *_wrap_FontConfig_GlyphRanges_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (ImWchar *) ((arg1)->GlyphRanges);
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


void _wrap_FontConfig_GlyphMinAdvanceX_set(ImFontConfig *_swig_go_0, float _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->GlyphMinAdvanceX = arg2;

}


float _wrap_FontConfig_GlyphMinAdvanceX_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (float) ((arg1)->GlyphMinAdvanceX);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_GlyphMaxAdvanceX_set(ImFontConfig *_swig_go_0, float _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->GlyphMaxAdvanceX = arg2;

}


float _wrap_FontConfig_GlyphMaxAdvanceX_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (float) ((arg1)->GlyphMaxAdvanceX);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_MergeMode_set(ImFontConfig *_swig_go_0, bool _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->MergeMode = arg2;

}


bool _wrap_FontConfig_MergeMode_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (bool) ((arg1)->MergeMode);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_RasterizerFlags_set(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  unsigned int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (unsigned int)_swig_go_1;

  if (arg1) (arg1)->RasterizerFlags = arg2;

}


intgo _wrap_FontConfig_RasterizerFlags_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  unsigned int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (unsigned int) ((arg1)->RasterizerFlags);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontConfig_RasterizerMultiply_set(ImFontConfig *_swig_go_0, float _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->RasterizerMultiply = arg2;

}


float _wrap_FontConfig_RasterizerMultiply_get(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (float) ((arg1)->RasterizerMultiply);
  _swig_go_result = result;
  return _swig_go_result;
}


ImFontConfig *_wrap_new_FontConfig() {
  ImFontConfig *result = 0 ;
  ImFontConfig *_swig_go_result;


  result = (ImFontConfig *)new ImFontConfig();
  *(ImFontConfig **)&_swig_go_result = (ImFontConfig *)result;
  return _swig_go_result;
}


void _wrap_delete_FontConfig(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  delete arg1;

}


void _wrap_FontGlyph_Codepoint_set(ImFontGlyph *_swig_go_0, short _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  ImWchar arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  if (arg1) (arg1)->Codepoint = arg2;

}


short _wrap_FontGlyph_Codepoint_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  ImWchar result;
  short _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (ImWchar) ((arg1)->Codepoint);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_AdvanceX_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->AdvanceX = arg2;

}


float _wrap_FontGlyph_AdvanceX_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->AdvanceX);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_X0_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->X0 = arg2;

}


float _wrap_FontGlyph_X0_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->X0);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_Y0_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Y0 = arg2;

}


float _wrap_FontGlyph_Y0_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->Y0);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_X1_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->X1 = arg2;

}


float _wrap_FontGlyph_X1_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->X1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_Y1_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Y1 = arg2;

}


float _wrap_FontGlyph_Y1_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->Y1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_U0_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->U0 = arg2;

}


float _wrap_FontGlyph_U0_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->U0);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_V0_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->V0 = arg2;

}


float _wrap_FontGlyph_V0_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->V0);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_U1_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->U1 = arg2;

}


float _wrap_FontGlyph_U1_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->U1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyph_V1_set(ImFontGlyph *_swig_go_0, float _swig_go_1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->V1 = arg2;

}


float _wrap_FontGlyph_V1_get(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  result = (float) ((arg1)->V1);
  _swig_go_result = result;
  return _swig_go_result;
}


ImFontGlyph *_wrap_new_FontGlyph() {
  ImFontGlyph *result = 0 ;
  ImFontGlyph *_swig_go_result;


  result = (ImFontGlyph *)new ImFontGlyph();
  *(ImFontGlyph **)&_swig_go_result = (ImFontGlyph *)result;
  return _swig_go_result;
}


void _wrap_delete_FontGlyph(ImFontGlyph *_swig_go_0) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;

  arg1 = *(ImFontGlyph **)&_swig_go_0;

  delete arg1;

}


void _wrap_FontGlyphRangesBuilder_UsedChars_set(ImFontGlyphRangesBuilder *_swig_go_0, ImVector< int > *_swig_go_1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< int > *arg2 = (ImVector< int > *) 0 ;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;
  arg2 = *(ImVector< int > **)&_swig_go_1;

  if (arg1) (arg1)->UsedChars = *arg2;

}


ImVector< int > *_wrap_FontGlyphRangesBuilder_UsedChars_get(ImFontGlyphRangesBuilder *_swig_go_0) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< int > *result = 0 ;
  ImVector< int > *_swig_go_result;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;

  result = (ImVector< int > *)& ((arg1)->UsedChars);
  *(ImVector< int > **)&_swig_go_result = (ImVector< int > *)result;
  return _swig_go_result;
}


ImFontGlyphRangesBuilder *_wrap_new_FontGlyphRangesBuilder() {
  ImFontGlyphRangesBuilder *result = 0 ;
  ImFontGlyphRangesBuilder *_swig_go_result;


  result = (ImFontGlyphRangesBuilder *)new ImFontGlyphRangesBuilder();
  *(ImFontGlyphRangesBuilder **)&_swig_go_result = (ImFontGlyphRangesBuilder *)result;
  return _swig_go_result;
}


bool _wrap_FontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder *_swig_go_0, intgo _swig_go_1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  result = (bool)((ImFontGlyphRangesBuilder const *)arg1)->GetBit(arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder *_swig_go_0, intgo _swig_go_1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  int arg2 ;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->SetBit(arg2);

}


void _wrap_FontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder *_swig_go_0, short _swig_go_1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImWchar arg2 ;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  (arg1)->AddChar(arg2);

}


void _wrap_FontGlyphRangesBuilder_AddText__SWIG_0(ImFontGlyphRangesBuilder *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  (arg1)->AddText((char const *)arg2,(char const *)arg3);

  free(arg2);
  free(arg3);
}


void _wrap_FontGlyphRangesBuilder_AddText__SWIG_1(ImFontGlyphRangesBuilder *_swig_go_0, _gostring_ _swig_go_1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  (arg1)->AddText((char const *)arg2);

  free(arg2);
}


void _wrap_FontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder *_swig_go_0, short *_swig_go_1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;
  arg2 = *(ImWchar **)&_swig_go_1;

  (arg1)->AddRanges((ImWchar const *)arg2);

}


void _wrap_FontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder *_swig_go_0, ImVector< unsigned short > *_swig_go_1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;
  arg2 = *(ImVector< ImWchar > **)&_swig_go_1;

  (arg1)->BuildRanges(arg2);

}


void _wrap_delete_FontGlyphRangesBuilder(ImFontGlyphRangesBuilder *_swig_go_0) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;

  arg1 = *(ImFontGlyphRangesBuilder **)&_swig_go_0;

  delete arg1;

}


intgo _wrap_FontAtlasFlags_None() {
  ImFontAtlasFlags_ result;
  intgo _swig_go_result;


  result = ImFontAtlasFlags_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_FontAtlasFlags_NoPowerOfTwoHeight() {
  ImFontAtlasFlags_ result;
  intgo _swig_go_result;


  result = ImFontAtlasFlags_NoPowerOfTwoHeight;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_FontAtlasFlags_NoMouseCursors() {
  ImFontAtlasFlags_ result;
  intgo _swig_go_result;


  result = ImFontAtlasFlags_NoMouseCursors;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


ImFontAtlas *_wrap_new_FontAtlas() {
  ImFontAtlas *result = 0 ;
  ImFontAtlas *_swig_go_result;


  result = (ImFontAtlas *)new ImFontAtlas();
  *(ImFontAtlas **)&_swig_go_result = (ImFontAtlas *)result;
  return _swig_go_result;
}


void _wrap_delete_FontAtlas(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  delete arg1;

}


ImFont *_wrap_FontAtlas_AddFont(ImFontAtlas *_swig_go_0, ImFontConfig *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImFontConfig **)&_swig_go_1;

  result = (ImFont *)(arg1)->AddFont((ImFontConfig const *)arg2);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontDefault__SWIG_0(ImFontAtlas *_swig_go_0, ImFontConfig *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImFontConfig **)&_swig_go_1;

  result = (ImFont *)(arg1)->AddFontDefault((ImFontConfig const *)arg2);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontDefault__SWIG_1(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImFont *)(arg1)->AddFontDefault();
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromFileTTF__SWIG_0(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, ImFontConfig *_swig_go_3, short *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;
  arg4 = *(ImFontConfig **)&_swig_go_3;
  arg5 = *(ImWchar **)&_swig_go_4;

  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromFileTTF__SWIG_1(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, ImFontConfig *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;
  arg4 = *(ImFontConfig **)&_swig_go_3;

  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromFileTTF__SWIG_2(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;

  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryTTF__SWIG_0(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3, ImFontConfig *_swig_go_4, short *_swig_go_5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(ImFontConfig **)&_swig_go_4;
  arg6 = *(ImWchar **)&_swig_go_5;

  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryTTF__SWIG_1(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3, ImFontConfig *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(ImFontConfig **)&_swig_go_4;

  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryTTF__SWIG_2(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryCompressedTTF__SWIG_0(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3, ImFontConfig *_swig_go_4, short *_swig_go_5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(ImFontConfig **)&_swig_go_4;
  arg6 = *(ImWchar **)&_swig_go_5;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryCompressedTTF__SWIG_1(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3, ImFontConfig *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(ImFontConfig **)&_swig_go_4;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryCompressedTTF__SWIG_2(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_0(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, ImFontConfig *_swig_go_3, short *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;
  arg4 = *(ImFontConfig **)&_swig_go_3;
  arg5 = *(ImWchar **)&_swig_go_4;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_1(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, ImFontConfig *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;
  arg4 = *(ImFontConfig **)&_swig_go_3;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_FontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_2(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


void _wrap_FontAtlas_ClearInputData(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  (arg1)->ClearInputData();

}


void _wrap_FontAtlas_ClearTexData(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  (arg1)->ClearTexData();

}


void _wrap_FontAtlas_ClearFonts(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  (arg1)->ClearFonts();

}


void _wrap_FontAtlas_Clear(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  (arg1)->Clear();

}


bool _wrap_FontAtlas_Build(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (bool)(arg1)->Build();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontAtlas_GetTexDataAsAlpha8__SWIG_0(ImFontAtlas *_swig_go_0, char **_swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3, intgo *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char ***)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;
  arg5 = *(int **)&_swig_go_4;

  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4,arg5);

}


void _wrap_FontAtlas_GetTexDataAsAlpha8__SWIG_1(ImFontAtlas *_swig_go_0, char **_swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char ***)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;

  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4);

}


void _wrap_FontAtlas_GetTexDataAsRGBA32__SWIG_0(ImFontAtlas *_swig_go_0, char **_swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3, intgo *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char ***)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;
  arg5 = *(int **)&_swig_go_4;

  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4,arg5);

}


void _wrap_FontAtlas_GetTexDataAsRGBA32__SWIG_1(ImFontAtlas *_swig_go_0, char **_swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char ***)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;

  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4);

}


bool _wrap_FontAtlas_IsBuilt(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (bool)(arg1)->IsBuilt();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontAtlas_SetTexID_(ImFontAtlas *_swig_go_0, ImTextureID _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;

  (arg1)->SetTexID(arg2);

}


short *_wrap_FontAtlas_GetGlyphRangesDefault(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesDefault();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_FontAtlas_GetGlyphRangesKorean(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesKorean();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_FontAtlas_GetGlyphRangesJapanese(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesJapanese();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_FontAtlas_GetGlyphRangesChineseFull(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesChineseFull();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_FontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesChineseSimplifiedCommon();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_FontAtlas_GetGlyphRangesCyrillic(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesCyrillic();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_FontAtlas_GetGlyphRangesThai(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesThai();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


intgo _wrap_FontAtlas_AddCustomRectRegular(ImFontAtlas *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (unsigned int)_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (int)(arg1)->AddCustomRectRegular(arg2,arg3,arg4);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_FontAtlas_AddCustomRectFontGlyph__SWIG_0(ImFontAtlas *_swig_go_0, ImFont *_swig_go_1, short _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, float _swig_go_5, ImVec2 *_swig_go_6) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImWchar arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  ImVec2 *arg7 = 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (ImWchar)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (float)_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;

  result = (int)(arg1)->AddCustomRectFontGlyph(arg2,arg3,arg4,arg5,arg6,(ImVec2 const &)*arg7);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_FontAtlas_AddCustomRectFontGlyph__SWIG_1(ImFontAtlas *_swig_go_0, ImFont *_swig_go_1, short _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, float _swig_go_5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImWchar arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (ImWchar)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (float)_swig_go_5;

  result = (int)(arg1)->AddCustomRectFontGlyph(arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  return _swig_go_result;
}


ImFontAtlas::CustomRect *_wrap_FontAtlas_GetCustomRectByIndex(ImFontAtlas *_swig_go_0, intgo _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  ImFontAtlas::CustomRect *result = 0 ;
  ImFontAtlas::CustomRect *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  result = (ImFontAtlas::CustomRect *)((ImFontAtlas const *)arg1)->GetCustomRectByIndex(arg2);
  *(ImFontAtlas::CustomRect **)&_swig_go_result = (ImFontAtlas::CustomRect *)result;
  return _swig_go_result;
}


void _wrap_FontAtlas_CalcCustomRectUV(ImFontAtlas *_swig_go_0, ImFontAtlas::CustomRect *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlas::CustomRect *arg2 = (ImFontAtlas::CustomRect *) 0 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImFontAtlas::CustomRect **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  (arg1)->CalcCustomRectUV((ImFontAtlas::CustomRect const *)arg2,arg3,arg4);

}


bool _wrap_FontAtlas_GetMouseCursorTexData(ImFontAtlas *_swig_go_0, intgo _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiMouseCursor arg2 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;
  ImVec2 *arg5 ;
  ImVec2 *arg6 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (ImGuiMouseCursor)_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;

  result = (bool)(arg1)->GetMouseCursorTexData(arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontAtlas_Locked_set(ImFontAtlas *_swig_go_0, bool _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool arg2 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->Locked = arg2;

}


bool _wrap_FontAtlas_Locked_get(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (bool) ((arg1)->Locked);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontAtlas_Flags_set(ImFontAtlas *_swig_go_0, intgo _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasFlags arg2 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (ImFontAtlasFlags)_swig_go_1;

  if (arg1) (arg1)->Flags = arg2;

}


intgo _wrap_FontAtlas_Flags_get(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasFlags result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImFontAtlasFlags) ((arg1)->Flags);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontAtlas_TexID_set(ImFontAtlas *_swig_go_0, ImTextureID _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;

  if (arg1) (arg1)->TexID = arg2;

}


ImTextureID _wrap_FontAtlas_TexID_get(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID result;
  ImTextureID _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImTextureID) ((arg1)->TexID);
  *(ImTextureID *)&_swig_go_result = (ImTextureID)result;
  return _swig_go_result;
}


void _wrap_FontAtlas_TexDesiredWidth_set(ImFontAtlas *_swig_go_0, intgo _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TexDesiredWidth = arg2;

}


intgo _wrap_FontAtlas_TexDesiredWidth_get(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (int) ((arg1)->TexDesiredWidth);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_FontAtlas_TexGlyphPadding_set(ImFontAtlas *_swig_go_0, intgo _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TexGlyphPadding = arg2;

}


intgo _wrap_FontAtlas_TexGlyphPadding_get(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (int) ((arg1)->TexGlyphPadding);
  _swig_go_result = result;
  return _swig_go_result;
}


ImFont *_wrap_new_Font() {
  ImFont *result = 0 ;
  ImFont *_swig_go_result;


  result = (ImFont *)new ImFont();
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


void _wrap_delete_Font(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;

  delete arg1;

}


ImFontGlyph *_wrap_Font_FindGlyph(ImFont *_swig_go_0, short _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFontGlyph *result = 0 ;
  ImFontGlyph *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  result = (ImFontGlyph *)((ImFont const *)arg1)->FindGlyph(arg2);
  *(ImFontGlyph **)&_swig_go_result = (ImFontGlyph *)result;
  return _swig_go_result;
}


ImFontGlyph *_wrap_Font_FindGlyphNoFallback(ImFont *_swig_go_0, short _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFontGlyph *result = 0 ;
  ImFontGlyph *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  result = (ImFontGlyph *)((ImFont const *)arg1)->FindGlyphNoFallback(arg2);
  *(ImFontGlyph **)&_swig_go_result = (ImFontGlyph *)result;
  return _swig_go_result;
}


float _wrap_Font_GetCharAdvance(ImFont *_swig_go_0, short _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  result = (float)((ImFont const *)arg1)->GetCharAdvance(arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_Font_IsLoaded(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (bool)((ImFont const *)arg1)->IsLoaded();
  _swig_go_result = result;
  return _swig_go_result;
}


_gostring_ _wrap_Font_GetDebugName(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (char *)((ImFont const *)arg1)->GetDebugName();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


ImVec2 *_wrap_Font_CalcTextSizeA__SWIG_0(ImFont *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5, _gostring_* _swig_go_6) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char **arg7 = (char **) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = *(char ***)&_swig_go_6;

  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg5);
  free(arg6);
  return _swig_go_result;
}


ImVec2 *_wrap_Font_CalcTextSizeA__SWIG_1(ImFont *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg5);
  free(arg6);
  return _swig_go_result;
}


ImVec2 *_wrap_Font_CalcTextSizeA__SWIG_2(ImFont *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg5);
  return _swig_go_result;
}


_gostring_ _wrap_Font_CalcWordWrapPositionA(ImFont *_swig_go_0, float _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, float _swig_go_4) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  float arg5 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';

  arg5 = (float)_swig_go_4;

  result = (char *)((ImFont const *)arg1)->CalcWordWrapPositionA(arg2,(char const *)arg3,(char const *)arg4,arg5);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  free(arg3);
  free(arg4);
  return _swig_go_result;
}


void _wrap_Font_RenderChar(ImFont *_swig_go_0, ImDrawList *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, short _swig_go_5) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImWchar arg6 ;
  ImVec2 *argp4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImDrawList **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;

  arg5 = (ImU32)_swig_go_4;
  arg6 = (ImWchar)_swig_go_5;

  ((ImFont const *)arg1)->RenderChar(arg2,arg3,arg4,arg5,arg6);

}


void _wrap_Font_RenderText__SWIG_0(ImFont *_swig_go_0, ImDrawList *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7, float _swig_go_8, bool _swig_go_9) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool arg10 ;
  ImVec2 *argp4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImDrawList **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;

  arg5 = (ImU32)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';

  arg9 = (float)_swig_go_8;
  arg10 = (bool)_swig_go_9;

  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8,arg9,arg10);

  free(arg7);
  free(arg8);
}


void _wrap_Font_RenderText__SWIG_1(ImFont *_swig_go_0, ImDrawList *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7, float _swig_go_8) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  ImVec2 *argp4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImDrawList **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;

  arg5 = (ImU32)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';

  arg9 = (float)_swig_go_8;

  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8,arg9);

  free(arg7);
  free(arg8);
}


void _wrap_Font_RenderText__SWIG_2(ImFont *_swig_go_0, ImDrawList *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImVec2 *argp4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImDrawList **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;

  arg5 = (ImU32)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';


  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8);

  free(arg7);
  free(arg8);
}


#ifdef __cplusplus
}
#endif

